{"version":3,"sources":["webpack:///./src/pages/koa2/index.mdx"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","src","alt","style","isMDXComponent"],"mappings":"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","file":"component---src-pages-koa-2-index-mdx-dd89fc051caf91fb5a2a.js","sourcesContent":["import React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/Users/bytedance/Desktop/gatsby/src/components/BlogLayout/index.js\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h2>{`前言`}</h2>\n    <p>{`koa和express都是nodejs的web框架,但它们的设定不同。\nexpress自身集成很多东西,比较重,适合企业级的应用开发。\nkoa功能纯粹,扩展功能需高度依赖生态。这种可插拔的形式使得其更为灵活,轻量。\n从npm周下载量来看,express千万级,koa十万级,差距还是很明显。\n本篇为源码系列核心实现第一篇,对应下图koa2部分。`}</p>\n    <p><img parentName=\"p\" {...{\n        \"src\": \"https://lengyuexin.github.io/gatsby/static/src-c54cf51e73a8fdc229c79ea7b981b607.png\",\n        \"alt\": \"src\"\n      }}></img></p>\n    <h2>{`核心功能概览`}</h2>\n    <p>{`koa2即使是全部代码,也没多少东西。从整体上看,主要分为五大方向。`}</p>\n    <table>\n      <thead parentName=\"table\">\n        <tr parentName=\"thead\">\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}></th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}></th>\n        </tr>\n      </thead>\n      <tbody parentName=\"table\">\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`name`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`desc`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`application`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`创建上下文,合并中间件,启动服务`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`request`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`对原生http模块req的扩展`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`response`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`对原生http模块res的扩展`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`context`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`对request和response的合并与代理`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`compose`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`合并中间件(洋葱模型的体现)`}</td>\n        </tr>\n      </tbody>\n    </table>\n    <h2>{`koa是如何启动一个服务的？`}</h2>\n    <h3>{`基本使用`}</h3>\n    <p>{`在详解上述功能模块前,先来看看koa最基础的使用。`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`const Koa=require('koa')\nconst app=new Koa()\napp.listen(3000,()=>{\n    console.log('run server__')\n})\n\n`}</code></pre>\n    <h3>{`核心实现`}</h3>\n    <p>{`简单的几行代码就实现了koa最核心的功能——提供基础的HTTP应用服务。\n它是如何实现的呢？其实也没什么玄机,直接用了内置的http模块。\n注意一个小细节:Application是一个类,这也就解释了在使用koa时为什么要new一下。`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`const http=require('http')\nclass Application{\n    listen(...args){\n       const server= http.createServer()\n       server.listen(...args)\n    }\n}\n`}</code></pre>\n    <h2>{`koa是如何处理一个请求的？`}</h2>\n    <h3>{`基础使用`}</h3>\n    <p>{`既然应用启动是直接使用了http模块,那对于请求处理是不是也和http模块的处理相似呢？\n是的,确实如此,但koa做的更多。先来看一个例子,\n下面代码背后包含了koa对于一个请求到响应的完整处理过程。`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`app.use(async ctx=>{\n    ctx.body='hello world'\n})\n\n`}</code></pre>\n    <h3>{`一个请求--响应带来的思考`}</h3>\n    <p>{`就这？一个use,一个ctx,一个body,啥也没看出来啊？\n还有,为啥要加个async ,去掉不行？`}</p>\n    <p>{`从视觉入手,这几个最直观的点也最好解释。\n带着问题去思考问题,是我最喜欢的学习方式。\nok,接下来,我们就看一下koa内部是如何处理请求的。`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`class Application{\n    use(fn){\n        this.fn=fn\n    }\n    handleRequest(req,res){\n        const ctx=this.createContext(req,res)\n        this.fn(ctx)\n    }\n     listen(...args){\n       const server= http.createServer(this.handleRequest.bind(this))\n       server.listen(...args)\n    }\n}\n\n`}</code></pre>\n    <p>{`这几行代码没什么玄机,所谓的use方法,不过是将接收的函数暂存,后续在handleRequest中执行。`}</p>\n    <p>{`handleRequest函数见名知意,用于处理请求。其实,也就是把原生http模块\ncreateServer的事件处理函数做了一个提取,并将上下文this指向我们自己\n写的Application类。其中,this.fn(ctx)这行代码,解释了为什么每一个请求处理函数都会接收ctx参数。`}</p>\n    <h3>{`createContext是什么？`}</h3>\n    <p>{`看名字是要创建上下文。是的,这就是koa独特的地方。`}</p>\n    <p>{`koa将原生http模块事件处理函数的req和res参数合二为一后又做了一层增强。\n最终的结果就是:req,res有的,ctx皆有。req,res没有的,ctx还有。\n对开发者而言,合二为一后完全无需关心某个方法是req的还是res的,直接一个ctx完事。`}</p>\n    <p>{`说了这么多,我们就来看一下createContext的庐山真面目。`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`class Application{\n    constructor(){\n        //这三个是外部引入的\n        this.context=context;\n        this.request=request;\n        this.response=response;\n    }\n    createContext(req,res){\n        //使用Object.create是为了在不对原模块进行干扰的情况下进行扩展,也是一层继承\n        const context=Object.create(this.context)\n        const request=Object.create(this.request)\n        const response=Object.create(this.response)\n        //上下文关联与合并\n        context.req=context.request.req=req    \n        context.res=context.response.res=res\n        //返回一个合并后的context;\n        return context\n    }\n}\n\n`}</code></pre>\n    <p>{`为了便于理解,我在必要部分加了一些注释。\n暂且不管构造器里的context,request,response是什么,先只看createContext函数做了什么。\n里边有两行看起来很绕的连续赋值代码,其实就是往ctx上挂载东西。`}</p>\n    <p>{`比如你用原生http模块结束响应是res.end(),那现在可以用ctx.res.end(),也可以用ctx.response.res.end()。\nreq和res是一样的道理,这里就不再赘述了。`}</p>\n    <h3>{`request和response`}</h3>\n    <p>{`到这里,我们之前疑惑的use,ctx已经解释完。在进一步解释async和body前,我们暂且引出一个新的问题。\nrequest和response与http模块事件处理函数的req,res的关系是什么？`}</p>\n    <p>{`首先可以肯定的是,绝不是同一个东西。但是,request和response是对req和res的一个增强。\n这两个文件,是koa单独搞出来的,其内部使用了getter,setter。`}</p>\n    <p>{`先来看一个request的简单示例：`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`const request={\n    get url() {\n        return this.req.url;\n    }\n}\nmodule.exports=request\n`}</code></pre>\n    <p>{`这里的this指向request对象,但仅这样还看不出玄机,别忘了在createContext方法中的request身上恰好挂了一个req。\n这意味着什么？意味着访问ctx.request.req 就是访问原生req。`}</p>\n    <p>{`举个例子：上边request中的url访问方式看似是ctx.request.url,实际上是ctx.request.req.url。`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`app.use(ctx => {\n    ctx.body=ctx.request.req.url===ctx.request.url //true\n})\n\n`}</code></pre>\n    <p>{`也许你会觉得,这个例子看起来好像是代理啊,如何起到增强作用呢?`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`const request = {\n    get headers() {\n        return this.req.headers;\n    },\n    get header() {\n        return this.req.headers;\n    },\n}\n\n`}</code></pre>\n    <p>{`个人习惯问题,在写代码时会纠结是headers还是header。\nkoa考虑的很人性化,不管你用哪种,都对,最终都是访问的headers。\n从这点考虑,岂不就是容错性的增强？当然,实际的增强并不仅限于此,甚至可以自定义你想要的业务逻辑。`}</p>\n    <p>{`response和request同理,这里不再赘述。只提最关键的一点,body。`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`const response = {\n    _body: '',\n    get body() {\n        return this._body\n    },\n    set body(newBody) {\n        this._body = newBody\n    }\n}\nmodule.exports = response\n`}</code></pre>\n    <p>{`这样一看是不是body也没那么神奇了呢？不过就是一个变量而已。\n若是访问,直接返回变量_body;若是设置,接收新值完成更新。`}</p>\n    <p>{`也许你会好奇,ctx.body和这个body是一个东西吗？是的,当然是。\n那它们是如何关联上的？看起来是代理？是的,就是代理,通过context。`}</p>\n    <h3>{`神奇的context代理`}</h3>\n    <p>{`先来看看context内部实现吧。`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`const context = {}\n\nfunction delegateGet(prop, key) {\n    //__defineGetter__这个方法是当访问对象的某个key时,执行回调\n    context.__defineGetter__(key, function () {\n        return this[prop][key]\n    })\n}\nfunction delegateSet(prop, key) {\n    context.__defineSetter__(key, function (newValue) {\n        this[prop][key] = newValue\n    })\n}\n\ndelegateGet('response', 'body')//访问ctx.body\ndelegateSet('response', 'body')//设置ctx.body='xxx'\ndelegateGet('request', 'url')//ctx.url<=>ctx.request.url\n\nmodule.exports = context\n\n`}</code></pre>\n    <p>{`看完上述代码来个小总结吧。\nctx本质是代理,并非增强;\nctx做的响应相关的,一定是交给response;\nctx做的请求相关的,一定是交给request。`}</p>\n    <p>{`关于`}<strong parentName=\"p\">{`defineGetter`}</strong>{`,可参考文末MDN相关链接。如果你去看koa源码,你会发现它使用了一个第三方包:delegates,其实这东西实现也是用的`}<strong parentName=\"p\">{`defineGetter`}</strong></p>\n    <h3>{`神奇的组合能力:compose`}</h3>\n    <p>{`到这里我们之前提到的疑惑只剩下async尚未解决,接下来就深入展开一波。\n在探究compose函数实现前,先来想一下为什么需要组合？解决了什么问题？`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`\napp.use(bodyParser())\napp.use(koaStatic())\n...\n\n`}</code></pre>\n    <p>{`koa中,use函数可以多次调用,但是默认情况下只会执行第一个。\n后边的如果想执行,需要上游调用next函数,也就是use函数的第二个参数。\n那如何涉及异步怎么搞？这就是async的意义所在。\n多个中间件如何执行呢？这就是compose函数的意义。(洋葱模型)`}</p>\n    <img src='https://img-blog.csdnimg.cn/20201126182252279.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyODEzNDkx,size_16,color_FFFFFF,t_70#pic_center' alt='onion' style={{\n      \"zoom\": \"30%\"\n    }} />\n    <img src='https://img-blog.csdnimg.cn/20201126182252258.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyODEzNDkx,size_16,color_FFFFFF,t_70#pic_center' alt='compose' style={{\n      \"zoom\": \"30%\"\n    }} />\n    <p>{`依次输出123456`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`\napp.use((ctx, next) => {\n    console.log(1)\n    next()\n    console.log(6)\n})\napp.use((ctx, next) => {\n    console.log(2)\n    next()\n    console.log(5)\n})\napp.use((ctx, next) => {\n    console.log(3)\n    next()\n    console.log(4)\n})\n\n`}</code></pre>\n    <p>{`接下来我们来研究一波它的实现。\n核心三要素,按存储顺序依次执行,支持异步,洋葱模型。`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`\n//做一个小小的改造,支持多个use调用\n    use(fn){\n        this.middlewares.push(fn)\n    }\n\n  compose(ctx) {\n    //这里dispatch(也就是next)使用箭头函数\n    //内部的this就指向了自定义的Application\n    const dispatch = (index) => {\n        //越界处理 handleRequest还有then 不能直接return ,要返回promise\n        if (index === this.middlewares.length) return Promise.resolve()\n        //获取当前的中间件 最开始是第一个\n        const middleware = this.middlewares[index]\n        // 中间件执行需要两个参数\n        const exec = middleware(ctx, () => dispatch(++index))\n        //有可能这个方法没有加async,包装一层\n        //保证返回的是一个promise\n        //这样handleRequest的then函数就不会报错(下文解释)\n        return Promise.resolve(exec)\n    }\n    return dispatch(0)\n}\n\n`}</code></pre>\n    <p>{`到这里,compose实现基本就完活了,边界细节可以去看koa-compose。`}</p>\n    <p>{`上边有提到最后要返回promise,看起来有些突兀。莫慌,补上最后一波代码就可以理解了。`}</p>\n    <h3>{`handleRequest`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`\n  handleRequest(req, res) {\n\n        const ctx = this.createContext(req, res)\n      //组合中间件 并执行返回后的promise,获取到_body 响应出去\n      //注意看这里,是有一个then的\n      //这就意味着最后不管你写的函数加不加async,进了compose,都是异步\n        this.compose(ctx).then(() => {\n             //默认只能处理buffer 和string\n            let _body = ctx.body;\n            if (_body === '') {\n                //如果没设置body 就给个默认值,状态码设置为404\n                res.statusCode = 404\n                _body = 'not found'\n                return res.end(_body)\n            } else if (_body instanceof Stream) {\n                //koa也支持直接返回一个文件流,通过pipe就可以做到 \n                return _body.pipe(res)\n            } else if (typeof _body !== 'null' && typeof _body === 'object') {\n                //对对象的处理\n                return res.end(JSON.stringify(_body))\n            } else if (_body == null) {\n                //null 和undefined 无法直接调用toString 可以拼接一下\n                return res.end(_body + '')\n            } else {\n                //其他类型的直接toString \n                return res.end(_body.toString())\n            }\n        }).catch(err => {\n            //这里为app添加了错误监听\n            //application继承events模块即可\n            this.emit('error', err)\n         })\n    }\n\n`}</code></pre>\n    <p>{`到这里核心部分就都解释完了,源码我会以压缩包形式给出。`}</p>\n    <p>{`最后来一波加餐,中间件的实现,本质就是函数返回一个接收ctx,next为参数的异步函数。`}</p>\n    <h2>{`koa-static`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`function koaStatic(dirname) {\n    return async function (ctx, next) {\n        try {\n            let filepath = path.join(dirname, ctx.path)\n            const stat = fs.statSync(filepath);\n            if (stat.isDirectory()) {\n                filepath = path.join(filepath, './index.html')\n                if (fs.existsSync(filepath)) {\n                    ctx.set('Content-Type', \\`text/html;charset=utf-8\\`)\n                    ctx.body = fs.createReadStream(filepath)\n                } else {\n                    await next()\n                }\n            } else {\n                if (fs.existsSync(filePath)) {\n                    //来自第三方包mime\n                    const mimeType = mime.getType(filepath)\n                    ctx.set('Content-Type', \\`\\${mimeType};charset=utf-8\\`)\n                    ctx.body = fs.createReadStream(filepath)\n                } else {\n                    await next()\n                }\n            }\n\n        } catch (error) {\n            await next()\n        }\n    }\n}\n\n//根据目录查找对应文件 找到返回 找不到next\napp.use(koaStatic(__dirname))\napp.use(koaStatic(path.resolve(__dirname, 'public')))\n\n`}</code></pre>\n    <h2>{`相关链接`}</h2>\n    <p><strong parentName=\"p\">{`defineGetter`}</strong>{`: `}<a parentName=\"p\" {...{\n        \"href\": \"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/__defineGetter__\"\n      }}>{`https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/__defineGetter__`}</a></p>\n    <h2>{`源码压缩包`}</h2>\n    <ul>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"https://github.com/lengyuexin/code\"\n        }}>{`https://github.com/lengyuexin/code`}</a></li>\n    </ul>\n    <h2>{`再会`}</h2>\n    <p>{`情如风雪无常,`}</p>\n    <p>{`却是一动既殇。`}</p>\n    <p>{`感谢你这么好看还来阅读我的文章,`}</p>\n    <p>{`我是冷月心,下期再见。`}</p>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}