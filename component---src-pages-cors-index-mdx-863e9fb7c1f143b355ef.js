(window.webpackJsonp=window.webpackJsonp||[]).push([[10],{vvap:function(e,t,n){"use strict";n.r(t),n.d(t,"_frontmatter",(function(){return b})),n.d(t,"default",(function(){return a}));n("rGqo"),n("yt8O"),n("Btvt"),n("RW0V"),n("91GP"),n("q1tI");var o=n("7ljp"),c=n("Hv6d"),l=n("JLKy");var b={},r={_frontmatter:b},s=c.a;function a(e){var t=e.components,n=function(e,t){if(null==e)return{};var n,o,c={},l=Object.keys(e);for(o=0;o<l.length;o++)n=l[o],t.indexOf(n)>=0||(c[n]=e[n]);return c}(e,["components"]);return Object(o.b)(s,Object.assign({},r,n,{components:t,mdxType:"MDXLayout"}),Object(o.b)("h3",null,"简单请求和复杂请求"),Object(o.b)(l.a,{mdxType:"P"},"cors分为简单请求和复杂请求，对于简单请求的限制较少，对于复杂请求的限制较多。 对于简单请求，基本上设置一个响应头Access-Control-Allow-Origin足矣，不会发探测请求(options)。 而对于复杂请求，往往需要一些额外的响应头的处理，会发探测请求。 那简单请求和复杂请求是如何划分的呢？先看下什么是简单请求:"),Object(o.b)("p",null,Object(o.b)("strong",{parentName:"p"},"请求方法为以下3种:")),Object(o.b)(l.a,{mdxType:"P"},"HEAD、GET、POST "),Object(o.b)("p",null,Object(o.b)("strong",{parentName:"p"},"请求头为以下3种:")),Object(o.b)(l.a,{mdxType:"P"},"Accept 期望返回格式",Object(o.b)("br",null),"Accept-Language 期望返回的语言",Object(o.b)("br",null),"Content-Type 决定文件接收方如何解析",Object(o.b)("br",null),"其中Content-Type只能是:text/plain、multipart/form-data 或 application/x-www-form-urlencoded",Object(o.b)("br",null),"这也就意味着:application/json 不是简单请求"),Object(o.b)("p",null,Object(o.b)("strong",{parentName:"p"},"除此之外的，都视为复杂请求")),Object(o.b)("h3",null,"options"),Object(o.b)("p",null,Object(o.b)("strong",{parentName:"p"},"只有复杂请求会发送options请求")),Object(o.b)(l.a,{mdxType:"P"},Object(o.b)("p",null,"可使用Access-Control-Max-Age 设置options请求发送时间间隔 Access-Control-Max-Age: 600 (10分钟)",Object(o.b)("br",null),"\nAccess-Control-Max-Age表示Access-Control-Allow-Origin和Access-Control-Allow-Headers的缓存时长)",Object(o.b)("br",null),"\n在 Firefox 中，上限是24小时 （即 86400 秒）。)",Object(o.b)("br",null),"\n在 Chromium v76 之前， 上限是 10 分钟（即 600 秒)。)",Object(o.b)("br",null),"\n从 Chromium v76 开始，上限是 2 小时（即 7200 秒)。)",Object(o.b)("br",null),"\nChromium 同时规定了一个默认值 5 秒。)",Object(o.b)("br",null),"\n如果值为 -1，表示禁用缓存，则每次请求前都需要使用 OPTIONS 预检请求。")),Object(o.b)("h3",null,"复杂请求的限制"),Object(o.b)(l.a,{style:{background:"pink"},mdxType:"P"},"对于复杂请求限制主要体现在两个方面:方法限制和请求头限制",Object(o.b)("br",null),"对于前者，后端可通过设置Access-Control-Allow-Methods，允许指定方法跨域，多个值则用逗号隔开 'PUT,DELETE'",Object(o.b)("br",null),"对于后者，后端可通过设置Access-Control-Allow-Headers，允许指定头跨域，多个值则用逗号隔开 'xxx,yyy'"),Object(o.b)("h3",null,"跨域携带cookie"),Object(o.b)(l.a,{style:{background:"lightblue"},mdxType:"P"},"默认情况下，不论是fetch还是axios,都不会跨域携带cookie。",Object(o.b)("br",null),"如果允许携带cookie,那后端设置的Access-Control-Allow-Origin和其他头的值不能是*，要具体指定",Object(o.b)("br",null),"如果允许携带cookie,需要后端设置Access-Control-Allow-Credentials为true",Object(o.b)("br",null)),Object(o.b)("p",null,Object(o.b)("strong",{parentName:"p"},"fetch默认会忽略cookie的发送")),Object(o.b)(l.a,{style:{background:"lightblue"},mdxType:"P"},"omit:默认值，忽略cookie的发送",Object(o.b)("br",null),"same-origin:表示cookie只能同域发送，不能跨域发送",Object(o.b)("br",null),"include:既可以同域发送，也可以跨域发送"),Object(o.b)("pre",null,Object(o.b)("code",Object.assign({parentName:"pre"},{className:"language-js"}),"\n fetch('http://localhost:3000/api/',{\n            headers:{\n                token:'xxx'\n            },\n            credentials: 'include'\n        }).then(res => {\n            return res.json()\n        }).then(res => {\n            console.log(res)\n  })\n\n")),Object(o.b)("p",null,Object(o.b)("strong",{parentName:"p"},"axios默认不允许跨域携带cookie")),Object(o.b)(l.a,{style:{background:"#4AC29A"},mdxType:"P"},"可通过设置:axios.defaults.withCredentials = true;改变"),Object(o.b)("h3",null,"后端跨域设置"),Object(o.b)("pre",null,Object(o.b)("code",Object.assign({parentName:"pre"},{className:"language-js"}),"const app = new (require('koa'))\napp.use((ctx) => {\n   // ctx.set('Access-Control-Allow-Origin', '*')\n    ctx.set('Access-Control-Allow-Origin', ctx.headers.origin)\n    ctx.set('Access-Control-Allow-Credentials',true)\n    // ctx.set('Access-Control-Allow-Headers', '*')\n    ctx.set('Access-Control-Allow-Headers', 'token')\n    // ctx.set('Access-Control-Allow-Methods', 'PUT,DELETE')\n    ctx.set('Access-Control-Allow-Methods', '*')\n    ctx.set('Access-Control-Max-Age', 60)//1分钟内不再发options请求\n    ctx.set('Set-Cookie', 'token=xxxyyyzzz')\n    ctx.body = { name: \"tom\" }\n})\n\napp.listen(3000, () => {\n    console.log('run server')\n})\n\n")))}a.isMDXComponent=!0}}]);
//# sourceMappingURL=component---src-pages-cors-index-mdx-863e9fb7c1f143b355ef.js.map