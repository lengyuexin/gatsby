{"version":3,"sources":["webpack:///./src/pages/study-from-project/index.mdx"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"mappings":"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","file":"component---src-pages-study-from-project-index-mdx-02345b14c7447a64db2d.js","sourcesContent":["import React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/Users/bytedance/Desktop/gatsby/src/components/BlogLayout/index.js\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h2>{`前言`}</h2>\n    <p>{`关于技术与业务的平衡，我一直坚持的观点就是`}<strong parentName=\"p\">{`技术服务于业务，业务驱动技术提升`}</strong>{`。`}</p>\n    <p>{`当然，这是理想状态。有的业务确实不需要多高深的技术，也没什么难度和挑战，按部就班即可。`}</p>\n    <p>{`直接表现就是面试问到你项目有什么难点和亮点，深思熟虑后你发现确实没什么可说的。`}</p>\n    <p>{`这个时候，有心和无意的区别就很大了。在一个项目中能收获什么，主要还是看自己怎么去发掘。`}</p>\n    <p>{`有场景就充分发挥，没场景就创造优化场景，合理即可。`}</p>\n    <p>{`今天我们就来聊一下，如何在一个项目中学习？`}</p>\n    <h2>{`编程思维`}</h2>\n    <p>{`接到需求，大概想一下就开始编码的程序员并不在少数。这是缺点吗？确切地说，因人而异。`}</p>\n    <p>{`对于大佬而言，写的过程就能考虑各种优化和边界处理。直接一步到位，写文档反而显得有些鸡肋。`}</p>\n    <p>{`对于初级程序员来说，很难在写代码的过程中把各种情况和边界考虑全面。甚至有可能`}<strong parentName=\"p\">{`写到一半发现之前的思路完全是错的，需要推翻重写`}</strong>{`。`}</p>\n    <p>{`这种返工耗时在项目开发时间不是那么充裕的情况下，是很容易delay的。`}</p>\n    <p>{`所以，建议尚未养成这种全面思考能力的小伙伴们选择文档先行。更专业一点，这种文档被称为`}<strong parentName=\"p\">{`技术设计文档`}</strong>{`，是需要进行评审的。`}</p>\n    <p>{`磨刀不误砍柴工，设计文档越是详细，开发起来越快，甚至可以直接cv大法。文档编写的时候需要体现出大概实现思路，可以细致到组件，方法，变量的命名上。如果涉及数据库，那也要把每一张表的各个字段，类型，注释什么的写好。`}</p>\n    <p>{`具体应该如何设计呢？这里我贴两个实习期项目实战的链接，可以当个参考。`}</p>\n    <ul>\n      <li parentName=\"ul\">\n        <p parentName=\"li\"><a parentName=\"p\" {...{\n            \"href\": \"https://mp.weixin.qq.com/s?__biz=MjM5NTQ3ODg3MQ==&mid=2247483864&idx=1&sn=af9adf81cf1e1a932e69960cb7621b7d&chksm=a6f6ade0918124f6d79914116b863deba2103142602738e80a5d2cad7972016dd6c0c1d85c5e&=1489737830&=zh_CN#rd\"\n          }}>{`设计的魅力（一）：导师问：你了解状态树的设计吗？我：什么是状态树？`}</a></p>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\"><a parentName=\"p\" {...{\n            \"href\": \"https://mp.weixin.qq.com/s?__biz=MjM5NTQ3ODg3MQ==&mid=2247483876&idx=1&sn=a5e3758eb9a2df8671511b4ac99bcd0c&chksm=a6f6addc918124ca30954adc681544ef50f4d6a23fd42743eaad08dfa825868b50055626d3cb&=1489737830&=zh_CN#rd\"\n          }}>{`设计的魅力(二): 导师问：新风格级联菜单调整需求想做吗？我：我能做吗？`}</a></p>\n      </li>\n    </ul>\n    <h2>{`react上手`}</h2>\n    <p>{`我个人是走的react技术栈。vue和angular虽然以前也学过，但基本上忘得差不多了。\n这部分给出三个链接，都是偏向基础的学习笔记，感兴趣的可以当个参考。`}</p>\n    <ul>\n      <li parentName=\"ul\">\n        <p parentName=\"li\"><a parentName=\"p\" {...{\n            \"href\": \"http://r6a.cn/bsdve\"\n          }}>{`react`}</a></p>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\"><a parentName=\"p\" {...{\n            \"href\": \"http://r6a.cn/bsdvg\"\n          }}>{`vue`}</a></p>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\"><a parentName=\"p\" {...{\n            \"href\": \"http://r6a.cn/bsdvy\"\n          }}>{`angular`}</a></p>\n      </li>\n    </ul>\n    <p>{`在我看来，上手一门新技术，最快的方式就是`}<strong parentName=\"p\">{`跟着官方示例撸一遍文档`}</strong>{`。`}</p>\n    <p>{`只要官方文档写的不是很离谱，大部分示例都是比较经典且友好的。`}</p>\n    <p>{`以react为例，明确划分了核心概念和高级指引。看完核心概念，能大概理解组件，属性传递，生命周期，事件处理后，就可以试着写一个todoList。写完没什么问题就可以上手业务开发,这个过程快的话一两个小时即可。如果js还不熟悉，可以去补一下红宝书和犀牛书，都有了新版。`}</p>\n    <p>{`贴一个以前的笔记链接，仅供参考：`}</p>\n    <p><strong parentName=\"p\"><a parentName=\"strong\" {...{\n          \"href\": \"http://r6a.cn/bsd1e\"\n        }}>{`redux+antd实现todoList`}</a></strong></p>\n    <h2>{`通用业务逻辑与解决方案`}</h2>\n    <p>{`对于固定的业务场景，自然也有通用的业务逻辑和解决方案。\n这部分实际上会有很多，这里我只说几个我所经历的。`}</p>\n    <h3>{`jwt登录认证`}</h3>\n    <p>{`这部分给出三个链接，分别是对jwt的解释和在java,node场景下的应用。`}</p>\n    <ul>\n      <li parentName=\"ul\"><strong parentName=\"li\"><a parentName=\"strong\" {...{\n            \"href\": \"http://r6a.cn/bse8x\"\n          }}>{`JSON WEB TOKEN`}</a></strong>{` `}</li>\n      <li parentName=\"ul\"><strong parentName=\"li\"><a parentName=\"strong\" {...{\n            \"href\": \"http://r6a.cn/bse8n\"\n          }}>{`springboot--jwt授权`}</a></strong>{` `}</li>\n      <li parentName=\"ul\"><strong parentName=\"li\"><a parentName=\"strong\" {...{\n            \"href\": \"http://r6a.cn/bse8q\"\n          }}>{`koa--jwt-cookie 授权`}</a></strong>{` :`}</li>\n    </ul>\n    <h3>{`注册`}</h3>\n    <p>{`注册时候需要收集每一个表单项数据并且校验合法性。这里可以用一个数组对象存储，类似下面这种结构。`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`\nconst form=[\n    {\n        formItem:'username',\n        pass:true\n    },\n    {\n        formItem:'password',\n        pass:true\n    },\n    {\n        formItem:'phone',\n        pass:true\n    },\n]\n\n\n`}</code></pre>\n    <p>{`如何使用呢？存在即合理，数组的every方法极为合适，该方法的返回结果用于设置是否可点击注册按钮。`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`\nconst flag = form.every(item=>item.pass) \n\n`}</code></pre>\n    <h3>{`避免重复注册`}</h3>\n    <p>{`点击注册按钮后，在请求尚未响应回来的空档期，快速点击，就会发送多个注册请求，导致数据库出现冗余数据。`}</p>\n    <p>{`解决也很简单，点击后立刻禁用。如注册成功，则跳转至登录页；如注册失败，则停留在当前页，恢复点击。`}</p>\n    <h3>{`加密存储`}</h3>\n    <p>{`对于关键的用户信息(如密码)需要加密存储，不能保存明文。`}</p>\n    <p>{`登录或者修改密码输入原密码时也是将加密结果与数据库存储的加密结果比对，不可涉及明文。`}</p>\n    <h3>{`图片优化`}</h3>\n    <p>{`对于那种涉及很多图片展示的场景，如花瓣网，大屏数据展示，如果不做任何处理，流畅度会大大降低。\n通用的手段是图片压缩和更换图片格式，两者达到一个平衡需要清晰度和尺寸都能兼顾，这就是webp的落地场景。`}</p>\n    <p>{`当然，这个有兼容性问题，需要考虑降级。详情可参考：`}</p>\n    <p><a parentName=\"p\" {...{\n        \"href\": \"https://mp.weixin.qq.com/s?__biz=MjM5NTQ3ODg3MQ==&mid=2247483820&idx=1&sn=ca2060d5fdc537bc81f34015de735864&chksm=a6f6ad9491812482d665f432a4b7fcc9b2cf6c33fa6babb9fec46890b1b7fbf48338e2e6fee8&=1489737830&=zh_CN#rd\"\n      }}>{`一场关于webp的革命，让你的网站更丝滑`}</a></p>\n    <h2>{`非预期问题排查与经验积累`}</h2>\n    <p>{`项目中是有可能会遇到很多踩坑点的，当然这个取决于你个人能力，当时写代码的思维清晰程度，以及一些外在因素。`}</p>\n    <p>{`下面分享几个我踩过的坑以及排查方法。`}</p>\n    <h3>{`组件非预期更新`}</h3>\n    <p>{`简单来说，就是你希望某个组件更新，但是它依然保留了上次的状态。\n什么情况下会造成这种情况呢？我举一个例子。`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`\nimport React, { useState } from 'react';\n\nimport { Table,  Space, Drawer } from 'antd';\nimport \"antd/dist/antd.css\";\nconst columns = (setVisible, setRecord) => [\n  {\n    title: 'Name',\n    dataIndex: 'name',\n    key: 'name',\n\n  },\n  {\n    title: 'Age',\n    dataIndex: 'age',\n    key: 'age',\n  },\n\n  {\n    title: 'Action',\n    key: 'action',\n    render: (text, record) => (\n      <Space size=\"middle\">\n        <span onClick={() => {\n          setVisible(true)\n          setRecord(record)\n        }}>查看</span>\n      </Space>\n    ),\n  },\n];\n\nconst data = [\n  {\n    key: '1',\n    name: 'John Brown',\n    age: 32,\n\n  },\n  {\n    key: '2',\n    name: 'Jim Green',\n    age: 42,\n\n  },\n  {\n    key: '3',\n    name: 'Joe Black',\n    age: 32,\n\n  },\n];\n\n\n\nfunction App() {\n\n  const [visible, setVisible] = useState(false);\n  const [record, setRecord] = useState({});\n  return (\n    <div>\n\n      <Table columns={columns(setVisible, setRecord)} dataSource={data} />\n      <Drawer\n        title=\"Basic Drawer\"\n        placement=\"right\"\n        closable={false}\n        onClose={() => {\n          setVisible(false)\n        }}\n        visible={visible}\n      >\n        <p>{record.name}</p>\n        <Show age={record.age}/>\n      </Drawer>\n    </div>\n  );\n}\n\nexport default App;\n\n\n\nclass Show extends React.Component {\n\n  constructor(props) {\n    super(props)\n    this.state = {\n      count: 0\n    }\n  }\n  componentDidMount() {\n    this.getCount();\n  }\n\n  getCount = () => {\n    setTimeout(() => {\n      this.setState({\n        count: this.props.age+1\n      })\n    }, 1000)\n  }\n  render() {\n    return <div>{this.state.count}</div>\n  }\n}\n\n\n\n`}</code></pre>\n    <p>{`代码逻辑大概就是对于每一条数据，点击查看的时候，可以看到名称和一个依赖年龄参数算出来的一个数。\n我们假定这个数必须通过一个接口计算得到，上述用setTimeout模拟了一下。`}</p>\n    <p>{`问题关键点在于，`}<strong parentName=\"p\">{`这个请求是只有Show组件挂载才会触发，之后不会再更新。`}</strong>{`\n这意味着，`}<strong parentName=\"p\">{`第一次点击查看会发生数值改变，以后怎么打开都是之前的那个值。`}</strong></p>\n    <p>{`解决也很容易，既然每次Drawer组件打开关闭都有状态变更，那Show组件也更新即可。`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`\n{visible&&<Show age={record.age}/>}\n\n`}</code></pre>\n    <p>{`类似这种非预期更新的还有很多，比如value和onChange的变量名没对上，使用mobx但是没对目标组件进行观测...`}</p>\n    <p>{`解决这类问题的核心就是`}<strong parentName=\"p\">{`找到恰当的更新时机，更新一次，必要时用key强制更新。`}</strong></p>\n    <h3>{`文件写入不全`}</h3>\n    <p>{`在实习期做的项目中有一个功能是在线实时保存，数据会以物理文件形式写入到磁盘，用户反馈页面展示效果不全才暴露出这个问题。`}</p>\n    <p>{`我当时的想法是网络波动导致只写入了一部分，后来发现并非如此，在那个时间段网络没毛病。`}</p>\n    <p>{`紧接着我想会不会是文件太大没有写完？看了一下其他写入的文件大小，最大也不超过10M。`}</p>\n    <p>{`这个量级node一会就写完了，显然也不是这个问题。`}</p>\n    <p>{`到最后，忘了怎么发现的了，是`}<strong parentName=\"p\">{`磁盘空间不够了...`}</strong></p>\n    <p>{`好吧，默默记住这种可能的坑。`}</p>\n    <h3>{`axios会删除get请求头中的Content-Type`}</h3>\n    <p>{`为什么删除？说实话，我并不确定。大胆的猜一下，axios认为get请求是简单请求，不需要设置这东西?`}</p>\n    <p>{`这东西会影响什么？影响我对cors的理解了。`}</p>\n    <p>{`在某个项目中，同事鲸鱼问我一个跨域问题的配置，然后发现同样的配置get请求可以但post请求不行。\n当时怀疑是传了cors以外的自定义头，变成了非简单请求，比如Content-Type:application/json;`}</p>\n    <p>{`看代码发现确实没有添加什么头的配置，很迷。找了一圈发现是全局配置了头，woc...然后困惑我的地方就出现了，既然设置了这个头，get和post都必然是非简单请求，为什么一个能过一个不能过？`}</p>\n    <p>{`我灵光一闪，难道是axios请求本身的问题？之前撸过源码，知道浏览器端axios其实就是用的xhr。`}</p>\n    <p>{`于是我打开Chrome控制台，写下如下代码，回车,查看请求头是否携带了content-type。`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`\nvar xhr=new XMLHttpRequest()\nxhr.open('get','/')\nxhr.setRequestHeader('content-type','application/json')\nxhr.send(null)\n\n`}</code></pre>\n    <p>{`果然，带上了...此时可以判定必然是axios做了手脚。`}</p>\n    <p>{`再去看axios源码，发现确实对content-type做了remove操作。`}</p>\n    <p>{`上边提到了cors，这里补一下：`}<a parentName=\"p\" {...{\n        \"href\": \"https://lengyuexin.github.io/gatsby/cors\"\n      }}>{`https://lengyuexin.github.io/gatsby/cors`}</a></p>\n    <h3>{`数据类型一致很重要`}</h3>\n    <p>{`近期在做某个需求的时候不小心踩了一个坑，js数据类型为字符串，但是数据库该字段设置成了int。\n这就导致小数位会被截断，怎么算都有偏差。`}</p>\n    <p>{`定位也经过了层层曲折，后来发现计算结果有小数但是存储都是整数，才意识到是类型问题。`}</p>\n    <p>{`涉及数据计算，类型一定要多加注意。`}</p>\n    <h2>{`代码段优化`}</h2>\n    <p>{`实现一种功能通常会有不止一种方法，能优化的最好优化一下。\n下面介绍几个我接触前端到现在常用的代码段优化手段，可当个参考。`}</p>\n    <h3>{`如果某个配置想要获取外部参数，用函数`}</h3>\n    <p>{`例如：`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`const columns = (setVisible, setRecord) => [\n  {\n    title: 'Name',\n    dataIndex: 'name',\n    key: 'name',\n\n  },\n  {\n    title: 'Age',\n    dataIndex: 'age',\n    key: 'age',\n  },\n\n  {\n    title: 'Action',\n    key: 'action',\n    render: (text, record) => (\n      <Space size=\"middle\">\n        <span onClick={() => {\n          setVisible(true)\n          setRecord(record)\n        }}>查看</span>\n      </Space>\n    ),\n  },\n];\n\n\n\n\n`}</code></pre>\n    <h3>{`大多数情况下更新和添加逻辑可复用`}</h3>\n    <ul>\n      <li parentName=\"ul\">{`前端处理可共用组件，编辑时候注意数据回显即可`}</li>\n      <li parentName=\"ul\">{`后端处理可共用接口`}</li>\n    </ul>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`async function addOrUpdate(params) {\n\n    if (params.id) {\n        //更新\n    } else {\n      //添加\n    }\n}\n\n`}</code></pre>\n    <h3>{`尽可能让常量有统一入口`}</h3>\n    <p>{`集中管理可以让代码结构更清晰，也方便常量的管理和查找。`}</p>\n    <ul>\n      <li parentName=\"ul\">{`如果是全局共用常量，建议放在src/common/consts`}</li>\n      <li parentName=\"ul\">{`如果是某个组件独有，建议放在src/components/xxx组件/consts`}</li>\n    </ul>\n    <h3>{`请求retry`}</h3>\n    <p>{`retry指的是自定义失败重试次数的请求，在网络条件不好或者服务端波动情况下很有用。`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`async function retry(options = {}, delay, count = 3) {\n\n  try {\n    return await axios(options)\n  } catch (error) {\n\n    if (--count === 0) {\n      return console.error(error.message)\n    } else {\n      setTimeout(() => {\n        return retry(options, count)\n      }, delay)\n    }\n  }\n}\n\n`}</code></pre>\n    <h3>{`批量处理应该是单接口的批量而不是请求的批量`}</h3>\n    <p>{`这句话听起来可能有些绕，我举个批量添加用户的例子。`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`\n//假定已经获取到了要添加的用户列表list\n\n// bad case 直接在前端循环发送请求\n// http1.x每个浏览器同域名有并发限制，如果用户特别多，后续请求只能排队\nlist.forEach(user=>{\n    //假定save为插入接口\n    save(user)\n})\n\n//good case 前端只进行一次调用，循环插入在接口中完成\n\n//client \nsave(list)\n\n// server\nasync function save(list){\n    list.forEach(user=>{\n    //假定insert为插入操作\n     insert(user)\n   })\n}\n\n\n\n`}</code></pre>\n    <h3>{`充分利用异步能力，不需要await的就不要await`}</h3>\n    <p>{`现行版本的js中确实每一个await都要包裹在async中,以后会去掉这个限制。`}</p>\n    <p>{`此外，并不是每一个async都必须await,如果没有依赖返回值的计算，天然的异步是非常快的。`}</p>\n    <h3>{`保证函数独立性，不要过度聚合`}</h3>\n    <p>{`函数的核心是复用，太多业务杂糅在一起，会使得其可复用性下降。`}</p>\n    <h3>{`不要太硬编码，换成map`}</h3>\n    <p>{`这样做的好处是，如果存在多处引用，只需要修改map就好，不用每个都改`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`\n// bad case \n\nif(flag === '成功'){\n    //do something\n}\n\n//good case \n\nconst map = {\n    success:'成功'\n}\n\nif(flag === map.success){\n    //do something\n}\n\n\n`}</code></pre>\n    <h2>{`再会`}</h2>\n    <p>{`事在人为，若有意改变，普通项目也会因你变得不那么普通。`}</p>\n    <p>{`关于如何在项目中学习，本期要聊的就是这些，希望对你有所帮助。`}</p>\n    <p>{`情如风雪无常,`}</p>\n    <p>{`却是一动既殇。`}</p>\n    <p>{`感谢你这么好看还来阅读我的文章,`}</p>\n    <p>{`我是冷月心,下期再见。`}</p>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}