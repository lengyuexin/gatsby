{"version":3,"sources":["webpack:///./src/pages/redux/index.mdx"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"mappings":"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","file":"component---src-pages-redux-index-mdx-6942e0aeb1a48852ca3e.js","sourcesContent":["import React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/Users/bytedance/Desktop/gatsby/src/components/BlogLayout/index.js\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h2>{`前言`}</h2>\n    <p>{`redux是一个十分常用js的状态管理库,但并不意味着一定为react服务,真正把redux和react绑在一起的是react-redux。\nredux里边有很多概念,比如store,action,reducer,dispatch。\n这些概念也和很多模板语法相绑定,比如更新状态需要派发一个action,而每个action必须要有一个type属性。\nreducer中根据action的type类型进行不同的业务逻辑处理,最终返回新状态完成状态变更。`}</p>\n    <p>{`猛然一看,整个更新链路还是很长的。这也是redux被吐槽的点吧,模板语法太多,显得冗余。\n但不管怎么说,redux还是很优秀的。站在面试角度,涉及的redux核心点其实还好,主要是createStore,compose。\n当然也有一些其他的,面试不太常考但确实是加分项的bindActionCreators,\ncombineReducers,applyMiddleware。`}</p>\n    <p>{`本篇为源码系列核心实现第三篇,对应下图redux部分。`}</p>\n    <p><img parentName=\"p\" {...{\n        \"src\": \"https://lengyuexin.github.io/gatsby/static/src-c54cf51e73a8fdc229c79ea7b981b607.png\",\n        \"alt\": \"src\"\n      }}></img></p>\n    <table>\n      <thead parentName=\"table\">\n        <tr parentName=\"thead\">\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}></th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}></th>\n        </tr>\n      </thead>\n      <tbody parentName=\"table\">\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`name`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`desc`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`createStore`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`创建store`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`compose`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`组合中间件(同为洋葱模型)`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`bindActionCreators`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`为actionCreator绑定dispatch`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`combineReducers`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`合并多个reducer`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`applyMiddleware`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`应用中间件`}</td>\n        </tr>\n      </tbody>\n    </table>\n    <h2>{`createStore到底干了点什么？`}</h2>\n    <h3>{`基本使用`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`import {createStore} from 'redux'\nconst store=createStore(reducer,initState)\n`}</code></pre>\n    <p>{`如果你实际用过redux,那对上面的代码一定不陌生。`}</p>\n    <p>{`createStore接收reducer,initState为参数,返回一个创建后的store。\n其实还有第三个参数enhancer,不过在本文不做重点。`}</p>\n    <p>{`大胆的猜一下,createStore的背后,偷偷的干了些什么呢？\n又或者说,你觉得,它应该在这个阶段做什么？`}</p>\n    <h3>{`内部实现`}</h3>\n    <p>{`createStore是一切状态来源,从这点考虑,它内部必然涉及状态的初始化。\n此外,说到状态,那自然要有状态获取和状态更新。\n而createStore内部,其实也就干了这几件事。`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`const createStore = (reducer, preloadState) => {\n    //状态初始化\n    let currentState = preloadState\n    let currentListeners = [];\n    //获取状态\n    function getState() {\n        return currentState;\n    }\n    //更新状态\n    const dispatch = action => {\n        currentState = reducer(currentState, action);\n        currentListeners.forEach((l) => l());\n        return action;\n    };\n    // initState 初始状态树构建\n    //其实这里type是什么没太大意义,主要是为了初始化\n    dispatch({ type: 'INIT' })\n    //订阅\n    const subscribe = listener => {\n        currentListeners.push(listener);\n        return function () {\n            let index = currentListeners.indexOf(listener);\n            currentListeners.splice(index, 1);\n        };\n    };\n    const store = {\n        getState,\n        dispatch,\n        subscribe,\n    };\n    return store;\n};\n`}</code></pre>\n    <p>{`关键点都有注释,应该好理解。至于subscribe,暂且略过,下一篇结合react-redux就好理解了。`}</p>\n    <p>{`面试会问什么呢？哈哈,结合我的经验,大概会问你redux中用了什么设计模式?\nsubscribe很明显的,发布订阅模式。`}</p>\n    <p>{`反过来想,如果问你知道什么设计模式,你也可以说发布订阅,并举例redux中createStore的实际应用。\n此外,如果你能手写createStore并指明发布订阅具体是哪里体现的,那绝对是加分项。`}</p>\n    <h2>{`好用的bindActionCreators`}</h2>\n    <p><strong parentName=\"p\">{`bindActionCreators解决了什么问题？`}</strong></p>\n    <p>{`我关注源码除了解决实际业务痛点和面试外,还有一点就是可以找到那些不太为人所知但确实很有用的小东西。\n就比如bindActionCreators。它将actionCreator与dispatch完成绑定,简化了redux的更新逻辑代码。`}</p>\n    <p>{`下一步探索前,先解释2个小概念,以防理解混乱。`}</p>\n    <table>\n      <thead parentName=\"table\">\n        <tr parentName=\"thead\">\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}></th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}></th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}></th>\n        </tr>\n      </thead>\n      <tbody parentName=\"table\">\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`name`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`desc`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`example`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`action`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`带有type属性的js简单对象`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`const action={ type:'xxx'}`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`actionCreator`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`一个返回action的函数`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`const ac=()=>({ type:'xxx'})`}</td>\n        </tr>\n      </tbody>\n    </table>\n    <p><strong parentName=\"p\">{`之前的写法`}</strong></p>\n    <p>{`ok,在引出bindActionCreator前,我们先看一下以前更新逻辑是如何的。`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`const add=(msg)=>({type:'add',msg})\n<button onClick={()=>{store.dispatch(add('add'))}}>add</button>\n`}</code></pre>\n    <p>{`代码看似很简单,但更新部分很冗余,每个更新都要加store.dispatch。`}</p>\n    <p>{`这东西能不能一次绑定,随处使用？bindActionCreator就是干这事用的。`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`function bindActionCreator(actionCreator, dispatch) {\n  return function(...args) {\n    return dispatch(actionCreator(...args))\n  }\n}\n\n`}</code></pre>\n    <p><strong parentName=\"p\">{`现在的写法`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`//有参场景\nconst add=bindActionCreator(add,store.dispatch)\n<button onClick={()=>add('add')}>add</button>\n\n//无参场景\nconst add=bindActionCreator(add,store.dispatch)\n<button onClick={add}>add</button>\n\n`}</code></pre>\n    <p>{`bindActionCreator本质就是将store.dispatch做了一个收敛,内部绑定actionCreator。\n这样一来,不论是有参数还是无参数情况,都看着简洁了些。如果是多绑定,效果更明显。`}</p>\n    <p><strong parentName=\"p\">{`bindActionCreators实现与应用`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`function bindActionCreators(actionCreators, dispatch) {\n    if (typeof actionCreators === \"function\") {\n        return bindActionCreator(actionCreators, dispatch);\n    }\n\n    const boundActionCreators = {};\n    for (const key in actionCreators) {\n        const actionCreator = actionCreators[key];\n        if (typeof actionCreator === \"function\") {\n            boundActionCreators[key] = bindActionCreator(actionCreator, dispatch);\n        }\n    }\n    return boundActionCreators;\n}\n\n// 绑定多个ActionCreator\nconst increment = () => ({ type: INCREMENT})\nconst decrement = () =>({ type: DECREMENT })\nconst actionCreators = {\n  increment,\n  decrement,\n};\nconst bindActions = bindActionCreators(actionCreators, store.dispatch);\n<button onClick={bindActions.increment}>+</button>\n<button onClick={bindActions.decrement}>-</button>\n\n`}</code></pre>\n    <p>{`如果你注意看bindActionCreators的实现,它其实是和传入的actionCreator同名绑定。`}</p>\n    <h2>{`combineReducers`}</h2>\n    <p>{`不论哪种形式的更新,最后都会走到reducer去处理。\n如果一个项目只有一个reducer,随着项目复杂度的提升,都写在一起会很难维护。`}</p>\n    <p>{`更好的方法是先拆后合。根据业务不同,可细分多个reducer,单独维护自己的小状态,最后合并在一起。\ncombineReducers就是用来干这件事的,它接收一个包含reducer的对象,并返回一个合并后的reducer。`}</p>\n    <p>{`为了更便于理解,文末我会放一个实战项目,请注意查收。`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`\n//获取各自对应的state和reducer,完成更新后返回新的state\nfunction combineReducers(reducers) {\n  return function (state, action) {\n    const nextState = {};\n    for (const key in reducers) {\n      if (reducers.hasOwnProperty(key)) {\n        let reducer = reducers[key];\n        let preStateForKey = state[key]; \n        let nextStateForKey = reducer(preStateForKey, action);\n        nextState[key] = nextStateForKey;\n      }\n    }\n    return nextState;\n  };\n}\n\n\n\n`}</code></pre>\n    <h2>{`中间件`}</h2>\n    <p>{`截止到目前,redux核心已经讲了一半,接下来是中间件的组合与应用。\n它并不神奇,但是有些难理解,建议多写代码实践下。\n对应源码中的applyMiddleware和compose。`}</p>\n    <h3>{`中间件是什么？`}</h3>\n    <p>{`顾名思义,中间件就是中间环节的处理过程,可以做一些额外的事。\n那什么算是中间环节呢？对redux来说,派发action到状态更新完毕整个过程中,\n任意节点都算是中间环节。也可以看做是工厂流水线,在中间环节不断加工。`}</p>\n    <p>{`先来个最好理解的logger中间件,在每次状态变更之后打印新状态。`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`\nconst originDispatch = store.dispatch;\n\nstore.dispatch = (action: any): any => {\n  console.log(\"before:\", store.getState());\n  originDispatch(action);\n  console.log(\"after:\", store.getState());\n  return action;\n};\n\n\n`}</code></pre>\n    <p>{`就这？就算是一个中间件了？是的,简化版可以这么理解。`}</p>\n    <p>{`如果想更进阶一层,可以这样写。`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`\nconst logger = function (api) {\n  return function (next) {\n    return function (action) {\n      console.log(\"before:\", api.getState());\n      let res = next(action);\n      console.log(\"after:\", api.getState());\n      return res;\n    };\n  };\n};\n\n\n`}</code></pre>\n    <p>{`为什么要写成这样？api,next又是什么？这些疑问会在applyMiddleware中给出答案,莫急。`}</p>\n    <h3>{`中间件的原理是什么？`}</h3>\n    <p>{`一句话,使用自定义逻辑的dispatch替换store中的dispatch,且在自定义的dispatch内部调用store.dispatch。\n有点绕,也有点像react中的自定义hooks,但拆开来看也许好理解些。`}</p>\n    <p>{`重写dispatch是为了自定义我们想要的逻辑,比如状态打印。\n而redux对外只提供了一种更新方式,那就是dispatch。\n所以我们需要保留原始的dispatch用于触发更新。`}</p>\n    <p>{`为了便于理解,再举一个派发异步action的例子。\n默认redux是不支持的,需要借助thunk,saga等异步中间件处理。\n这里来个简化版的异步处理:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`const originDispatch = store.dispatch;\nstore.dispatch = action=> {\n  // 也可以根据action.type决定是否需要延迟处理\n  setTimeout(() => {\n    // 外部先延迟处理\n    // 这里调用改写前的store.dispatch \n    // 本质还是同步\n    originDispatch(action);\n  }, 1000);\n\n  return action;\n};\n\n`}</code></pre>\n    <h2>{`applyMiddleware`}</h2>\n    <p>{`applyMiddleware用于应用中间件,其流程相对繁杂。\n首先,applyMiddleware接收中间件为参数,函数调用后返回一个storeEnhancer。\n其次,storeEnhancer接收createStore为参数,返回storeEnhancerStoreCreator。\n最后,storeEnhancerStoreCreator 接收reducer和initState, 返回store。`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`const storeEnhancer = applyMiddleware(logger);\nconst storeEnhancerStoreCreator = storeEnhancer(createStore);\nconst _store = storeEnhancerStoreCreator(rootReducer, {\n  counter1: { number: 0 },\n  counter2: { number: 0 },\n});\n\n\n\n`}</code></pre>\n    <p><strong parentName=\"p\">{`applyMiddleware实现`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`\n function applyMiddleware(...middlewares) {\n  return (createStore) => {\n    return (...args) => {\n      let store = createStore(...args);\n      let dispatch = () => {};\n\n      const middlewareAPI = {\n        getState: store.getState,\n        dispatch: (...args) => dispatch(...args),\n      };\n\n      //注意这里传递的middlewareAPI\n      //其实就是中间件执行时候接收的api参数\n      //直接解构可以得到getState函数和dispatch函数\n      const chain = middlewares.map((middleware) => middleware(middlewareAPI));\n      dispatch = compose(...chain)(store.dispatch);\n      //此时的dispatch已经是应用完中间件后的dispatch\n      return {\n        ...store,\n        dispatch,\n      };\n    };\n  };\n}\n\n\n\n\n`}</code></pre>\n    <p>{`上边代码需要额外关注的是下边这两行，本质都是在进行绑定，或者说，柯里化。`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`// chain = [(next)=>(action)=>{…}, (next)=>(action)=>{…}, (next)=>(action)=>{…}]\nconst chain = middlewares.map((middleware) => middleware(middlewareAPI));\ndispatch = compose(...chain)(store.dispatch);\n\n`}</code></pre>\n    <p>{`最原始的中间件其实有三层api=>next=>action=>{},一直到最后一层才真正派发action。\n在map执行完，已经拆出了一层。chain实际内容已在上边注释中标出，api是什么在applyMiddleware中标出。`}</p>\n    <p>{`那问题来了，next是什么？`}</p>\n    <p>{`在解释前，需要先看下compose函数。`}</p>\n    <h2>{`compose`}</h2>\n    <p>{`看起来compose有些难理解，一句话，从右至左依次将右边的返回值作为左边的参数传入。\n不得不佩服redux作者，这波思路实在是有点秀。`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`\nfunction compose(...funcs) {\n  if (funcs.length === 0) {\n    return (arg) => arg;\n  }\n\n  if (funcs.length === 1) {\n    return funcs[0];\n  }\n\n  return funcs.reduce((a, b) => (...args) => a(b(...args)));\n}\n\n\n\n`}</code></pre>\n    <p>{`组合了什么？看起来似乎还是不太好理解。来个小例子，说明组合的效果。`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`\nfunction m1(a) {\n    return '冷' + a\n}\n\nfunction m2(b) {\n    return '月' + b\n}\n\nfunction m3(c) {\n    return '心' + c\n}\n\n//从右到左依次执行\n//返回的结果用作下一个函数的参数\nm1(m2(m3('1024')))//冷月心1024\n\n`}</code></pre>\n    <p>{`这个时候再看compose(...chain)(store.dispatch)，是否有些感觉了？`}</p>\n    <p>{`实际上如果只有一个中间件，那么next实际就是指的传入的参数，即store.dispatch。\n如果是多个中间件，next指向的就是下一个中间件。`}</p>\n    <p>{`回首再看logger中间件。`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`\nconst logger = function (api) {\n  //next代表的是调用下一个中间件或者原来的store.dispatch\n  return function (next) {\n    //这里返回的函数就是compose最终组合后的结果，即改写后的dispatch\n    //至于为什么要改写，最开始中间件原理有提到\n    //自定义逻辑就必须改写，保证能触发更新就必须调用旧的dispatch\n    return function (action) {\n      console.log(\"before:\", api.getState());\n      let res = next(action);\n      console.log(\"after:\", api.getState());\n      return res;\n    };\n  };\n};\n\n\n`}</code></pre>\n    <h2>{`redux-thunk`}</h2>\n    <p>{`顺路看一眼thunk的实现，重在思想，代码其实不多。`}</p>\n    <p>{`在Redux中默认action必须是一个简单对象，其中不包括函数和数组，且默认只能处理同步逻辑。\n因为异步的刚派发过去还没拿到返回结果reducer已经完事了，显然不符合预期。\n当我们使用redux-thunk后，可以dispatch一个函数，然后在其内部写异步派发逻辑。`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`\nfunction createThunkMiddleware(extraArgument) {\n    return ({ dispatch, getState }) => (next) => (action) => {\n        //如果是函数 执行后返回\n        if (typeof action === 'function') {\n            return action(dispatch, getState, extraArgument);\n        }\n        //next为之前传入的store.dispatch，即改写前的dispatch\n        return next(action);\n    };\n}\nconst thunk = createThunkMiddleware();\nthunk.withExtraArgument = createThunkMiddleware;\n\n\n\n\n`}</code></pre>\n    <h2>{`实战项目`}</h2>\n    <ul>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"https://github.com/lengyuexin/jianshu\"\n        }}>{`https://github.com/lengyuexin/jianshu`}</a></li>\n    </ul>\n    <h2>{`源码压缩包`}</h2>\n    <ul>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"https://github.com/lengyuexin/code\"\n        }}>{`https://github.com/lengyuexin/code`}</a></li>\n    </ul>\n    <h2>{`再会`}</h2>\n    <p>{`情如风雪无常,`}</p>\n    <p>{`却是一动既殇。`}</p>\n    <p>{`感谢你这么好看还来阅读我的文章,`}</p>\n    <p>{`我是冷月心,下期再见。`}</p>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}