{"version":3,"sources":["webpack:///./src/pages/js-core/prototype/index.mdx"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","style","background","parentName","isMDXComponent"],"mappings":"4RAOO,IAAMA,EAAe,GAOtBC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,E,oIACF,mBACD,OAAO,YAACJ,EAAD,iBAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAI5E,8BACA,8CACA,YAAC,IAAD,CAAGC,MAAO,CACRC,WAAY,WACXF,QAAQ,KACT,uBAAK,kCAAMG,WAAW,OAAU,CAC5B,UAAa,gBADZ,urBAuBP,qCACA,YAAC,IAAD,CAAGF,MAAO,CACRC,WAAY,WACXF,QAAQ,KACT,uBAAK,kCAAMG,WAAW,OAAU,CAC5B,UAAa,gBADZ,qKASP,2CACA,YAAC,IAAD,CAAGF,MAAO,CACRC,WAAY,WACXF,QAAQ,KACT,uBAAK,kCAAMG,WAAW,OAAU,CAC5B,UAAa,gBADZ,wGAUP,wCACA,YAAC,IAAD,CAAGF,MAAO,CACRC,WAAY,WACXF,QAAQ,KACT,uBAAK,kCAAMG,WAAW,OAAU,CAC5B,UAAa,gBADZ,iNAgBXN,EAAWO,gBAAiB","file":"component---src-pages-js-core-prototype-index-mdx-936abef0644d6598b35a.js","sourcesContent":["import React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/Users/bytedance/Desktop/gatsby/src/components/BlogLayout/index.js\";\nimport P from '../../../components/Panel.js';\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n\n    <h2>{`核心概念`}</h2>\n    <p>{`原型相关概念：构造函数，原型对象，实例对象`}</p>\n    <P style={{\n      background: '#FDB99B'\n    }} mdxType=\"P\">\n      <pre><code parentName=\"pre\" {...{\n          \"className\": \"language-js\"\n        }}>{`function Person() { }\nvar p = new Person()\n//  上述代码 构造函数就是Person,原型对象是Person.prototype,实例对象是p\n//  三者关系是\n// new Person =>得到实例对象\n// 实例对象p的constructor属性指向该构造函数Person \n// p.constructor===Person true\n// 实例对象p的属性__proto__  指向 Person.prototype  \n// p.__proto__===Person.prototype true\n// 原型对象Person.prototype的constructor属性指向构造函数 \n// Person Person.prototype.constructor===Person true\n// 构造函数Person的prototype属性指向Person.prototype\n//  每一个实例的__proto__ 都会对应一个原型对象\n//  而这个原型对对象也是某个构造函数的实例\n//  由此构成一条完整的原型链\n//  一直到Object.prototype 它的 __proto__属性为null\np.__proto__ === Person.prototype// true\np.__proto__.__proto__ === Object.prototype// true\nObject.prototype.__proto__ === null // true\n`}</code></pre>\n    </P>\n    <h2>{`实现一个new 操作符`}</h2>\n    <P style={{\n      background: '#FDB99B'\n    }} mdxType=\"P\"> \n      <pre><code parentName=\"pre\" {...{\n          \"className\": \"language-js\"\n        }}>{`function mynew(fn, ...args) {\n    var obj = Object.create(fn.prototype)\n    var res = fn.apply(obj, args)\n    return res instanceof Object ? res : obj;\n}\n`}</code></pre>\n    </P>\n    <h2>{`实现一个object.create`}</h2>\n    <P style={{\n      background: '#FDB99B'\n    }} mdxType=\"P\">\n      <pre><code parentName=\"pre\" {...{\n          \"className\": \"language-js\"\n        }}>{`function create(proto) {\n    function F() { }\n    F.prototype = proto\n    return new F()\n\n}\n`}</code></pre>\n    </P>\n    <h2>{`实现一个instanceof`}</h2>\n    <P style={{\n      background: '#FDB99B'\n    }} mdxType=\"P\">\n      <pre><code parentName=\"pre\" {...{\n          \"className\": \"language-js\"\n        }}>{`function myinstanceof(instance, constructor) {\n\n    while (instance) {\n        if (instance === constructor.prototype) return true\n        instance = instance.__proto__\n    }\n    return false\n}\n`}</code></pre>\n    </P>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}