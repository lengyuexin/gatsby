{"version":3,"sources":["webpack:///./src/pages/node/pipe/index.mdx"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","style","background","parentName","isMDXComponent"],"mappings":"4RAOO,IAAMA,EAAe,GAOtBC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,E,oIACF,mBACD,OAAO,YAACJ,EAAD,iBAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAI5E,YAAC,IAAD,CAAGA,QAAQ,KACT,2EAEF,YAAC,IAAD,CAAGC,MAAO,CACRC,WAAY,WACXF,QAAQ,KACT,uBAAK,kCAAMG,WAAW,OAAU,CAC5B,UAAa,gBADZ,gtBAyCXN,EAAWO,gBAAiB","file":"component---src-pages-node-pipe-index-mdx-1f7f001d0a8906aec3dd.js","sourcesContent":["import React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/Users/bytedance/Desktop/gatsby/src/components/BlogLayout/index.js\";\nimport P from '../../../components/Panel.js';\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n\n    <P mdxType=\"P\">\n      <p>{`通过管道可控制流速，当没有写入空间时暂停读取，在有空间时继续读取并完成写入，读取完毕后关闭可写流。`}</p>\n    </P>\n    <P style={{\n      background: '#FDB99B'\n    }} mdxType=\"P\">\n      <pre><code parentName=\"pre\" {...{\n          \"className\": \"language-js\"\n        }}>{`\nconst fs = require('fs')\nfunction pipe(readFile,writeFileu){\n    let rs = fs.createReadStream(readFile,{\n        highWaterMark:5\n    })\n    let ws = fs.createWriteStream(writeFileu,{\n        highWaterMark:1\n    })\n    rs.on('data',function(chunk){\n        // 当ws.write() 返回false时\n        //表示没有空间继续写入了，暂停读取\n        if(ws.write(chunk) == false){\n            rs.pause() // 暂停rs的data事件\n        }\n    })\n    // 当触发可写流的drain，表示有空间继续写入了，\n    //继续读取文件\n    ws.on('drain',function(){\n        rs.resume() \n    // 恢复rs的data事件    \n   // 把当前读入的内容都写到文件中了，继续调用读写\n    })\n    // 当读取流触发end方法，表示读取完毕\n    //这时关闭可写流的写入\n    rs.on('end',function(){\n        ws.end()\n    })\n}\npipe('1.txt','./2.txt')\n\n\n\n`}</code></pre>\n    </P>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}