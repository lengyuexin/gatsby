(window.webpackJsonp=window.webpackJsonp||[]).push([[52],{ojTK:function(t,e,n){"use strict";n.r(e),n.d(e,"_frontmatter",(function(){return o})),n.d(e,"default",(function(){return s}));n("rGqo"),n("yt8O"),n("Btvt"),n("RW0V"),n("91GP"),n("q1tI");var a=n("7ljp"),c=n("Hv6d");var o={},p={_frontmatter:o},r=c.a;function s(t){var e=t.components,n=function(t,e){if(null==t)return{};var n,a,c={},o=Object.keys(t);for(a=0;a<o.length;a++)n=o[a],e.indexOf(n)>=0||(c[n]=t[n]);return c}(t,["components"]);return Object(a.b)(r,Object.assign({},p,n,{components:e,mdxType:"MDXLayout"}),Object(a.b)("h2",null,"前言"),Object(a.b)("p",null,"react-redux作为react和redux的粘合剂,可完成状态的订阅与更新。\n这部分涉及的核心功能点有三个:provider,context,connect。"),Object(a.b)("p",null,"面试高频:connect,mapStateToProps,mapDispatchToProps的应用和原理。"),Object(a.b)("p",null,"本篇为源码系列核心实现第四篇,对应下图react-redux部分。"),Object(a.b)("p",null,Object(a.b)("img",Object.assign({parentName:"p"},{src:"https://lengyuexin.github.io/gatsby/static/src-c54cf51e73a8fdc229c79ea7b981b607.png",alt:"src"}))),Object(a.b)("table",null,Object(a.b)("thead",{parentName:"table"},Object(a.b)("tr",{parentName:"thead"},Object(a.b)("th",Object.assign({parentName:"tr"},{align:null})),Object(a.b)("th",Object.assign({parentName:"tr"},{align:null})))),Object(a.b)("tbody",{parentName:"table"},Object(a.b)("tr",{parentName:"tbody"},Object(a.b)("td",Object.assign({parentName:"tr"},{align:null}),"name"),Object(a.b)("td",Object.assign({parentName:"tr"},{align:null}),"desc")),Object(a.b)("tr",{parentName:"tbody"},Object(a.b)("td",Object.assign({parentName:"tr"},{align:null}),"provider"),Object(a.b)("td",Object.assign({parentName:"tr"},{align:null}),"数据提供方")),Object(a.b)("tr",{parentName:"tbody"},Object(a.b)("td",Object.assign({parentName:"tr"},{align:null}),"context"),Object(a.b)("td",Object.assign({parentName:"tr"},{align:null}),"状态上下文对象")),Object(a.b)("tr",{parentName:"tbody"},Object(a.b)("td",Object.assign({parentName:"tr"},{align:null}),"connect"),Object(a.b)("td",Object.assign({parentName:"tr"},{align:null}),"高阶组件,被包装后的组件可连接store")))),Object(a.b)("h2",null,"Provider与Context"),Object(a.b)("p",null,"Provider用于向所有组件传递数据仓库store,配合Context使用。"),Object(a.b)("h3",null,"基本使用"),Object(a.b)("pre",null,Object(a.b)("code",Object.assign({parentName:"pre"},{className:"language-js"}),"//store来源于redux中createStore方法的返回值。\n function App() {\n  return (\n    <Provider store={store}>\n      <Child />\n    </Provider>\n  );\n}\n\n")),Object(a.b)("h3",null,"实现"),Object(a.b)("p",null,Object(a.b)("strong",{parentName:"p"},"context的实现")),Object(a.b)("pre",null,Object(a.b)("code",Object.assign({parentName:"pre"},{className:"language-js"}),"const context = React.createContext(null);\nexport default context;\n\n")),Object(a.b)("p",null,Object(a.b)("strong",{parentName:"p"},"provider的实现")),Object(a.b)("pre",null,Object(a.b)("code",Object.assign({parentName:"pre"},{className:"language-js"}),"\n//ReactReduxContext就是上边的context\n class Provider extends Component{\n  render() {\n    return (\n      <ReactReduxContext.Provider\n        value={{store: this.props.store}}\n      >\n        {this.props.children}\n      </ReactReduxContext.Provider>\n    );\n  }\n}\n\n")),Object(a.b)("p",null,"这就完事了？是的,大道至简。\n关键也不在这里,下面来看重头戏connect。"),Object(a.b)("h2",null,"connect"),Object(a.b)("h3",null,"connect是怎么使用的？"),Object(a.b)("p",null,"了解其背后实现前,先看一下大概用法。"),Object(a.b)("pre",null,Object(a.b)("code",Object.assign({parentName:"pre"},{className:"language-js"}),"import { connect } from 'react-redux'\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(App)\n\n")),Object(a.b)("p",null,"就这？对,就这一下子就完事了。\nconnect是高阶函数,最后会返回一个包装后的组件。"),Object(a.b)("h3",null,"mapStateToProps和mapDispatchToProps"),Object(a.b)("p",null,"connect方法可接受两个参数:mapStateToProps和mapDispatchToProps。\n其中mapStateToProps用于将从store中获取的state映射到被包裹组件的props上,主要用于数据渲染。\nmapDispatchToProps是将交互逻辑映射成action后传递给被包装后的组件,主要用于事件交互(如点击)。"),Object(a.b)("p",null,"mapStateToProps是一个函数,最后会返回一个对象,对象属性为store中状态树的同名属性。"),Object(a.b)("pre",null,Object(a.b)("code",Object.assign({parentName:"pre"},{className:"language-js"}),"//store中数据\nstate:{\n    name:'冷月心'\n}\nconst mapStateToProps = (state) => {\n  return {\n    name:state.name\n  }\n}\n\n//被connect包裹后组件props中可以拿到name属性\nfunction App(props){\n props.name//冷月心\n}\n\n")),Object(a.b)("p",null,"mapStateToProps会订阅 Store,state更新会触发视图的重新渲染,这在react中表现为setState。\n这部分就涉及到了subscribe和setState,暂且略过,下文会提到。"),Object(a.b)("p",null,Object(a.b)("strong",{parentName:"p"},"第二个参数")),Object(a.b)("p",null,"我之前面试,忘了哪个面家面试官问的了,但确实没回答上。"),Object(a.b)("p",null,"他问我mapStateToProps和mapDispatchToProps的第二个参数是什么？\n说实话我脑瓜子嗡嗡的,当时一脸诧异,这还有第二个参数？\n后来了解到确实有,就是组件自身的props,也可以叫ownProps。\n且ownProps发生改变,mapStateToProps和mapDispatchToProps就会重新被调用。"),Object(a.b)("p",null,Object(a.b)("strong",{parentName:"p"},"不同类型的mapDispatchToProps")),Object(a.b)("p",null,"与mapStateToProps不同,mapDispatchToProps可以是一个对象,也可以是一个函数。\nconnect内部,对象类型的mapDispatchToProps会使用bindActionCreators完成ActionCreators与dispatch的绑定。\n函数类型的mapDispatchToProps会接收一个dispatch参数,返回dispatch后的action。"),Object(a.b)("pre",null,Object(a.b)("code",Object.assign({parentName:"pre"},{className:"language-js"}),"//函数形式\nconst mapDispatchToProps = (\n  dispatch\n) => {\n  return {\n    onClick: () => {\n      dispatch({\n        type: 'ADD',\n      });\n    }\n  };\n}\n\n//对象形式\n\nconst mapDispatchToProps = {\n  onClick: () => ({\n    type: 'ADD',\n  })\n}\n\n\n")),Object(a.b)("p",null,"具体使用哪种形式还是看个人习惯，喜欢就好。"),Object(a.b)("h3",null,"connect的实现"),Object(a.b)("p",null," connect一共做了四件事:订阅,状态映射,dispatch映射,返回扩展后的被包裹组件。"),Object(a.b)("pre",null,Object(a.b)("code",Object.assign({parentName:"pre"},{className:"language-js"}),'\nimport React from "react";\nimport bindActionCreators from "../redux/bindActionCreators";\nimport ReactReduxContext from "./Context";\nexport default function (mapStateToProps, mapDispatchToProps) {\n  return function (OldComponent) {\n    return class newComponent extends React.Component {\n      unsubscribe;\n      static contextType = ReactReduxContext;\n      constructor(props, context) {\n        super(props);\n        this.state = mapStateToProps(context.store.getState());\n      }\n\n      componentDidMount() {\n        this.unsubscribe = this.context.store.subscribe(() => {\n          // mapStateToProps接收一个state参数,返回一个state对象\n          this.setState(mapStateToProps(this.context.store.getState()));\n        });\n      }\n\n      componentWillUnmount() {\n        this.unsubscribe();\n      }\n\n      render() {\n        let actions;\n        if (typeof mapDispatchToProps === "function") {\n          actions = mapDispatchToProps(this.context.store.dispatch);\n        } else if (\n          mapDispatchToProps &&\n          typeof mapDispatchToProps === "object"\n        ) {\n          actions = bindActionCreators(\n            mapDispatchToProps,\n            this.context.store.dispatch\n          );\n        }\n\n        return <OldComponent {...this.state} {...actions} />;\n      }\n    };\n  };\n}\n\n\n')),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},"connect在挂载阶段订阅更新函数setState,在卸载阶段取消订阅。"),Object(a.b)("li",{parentName:"ul"},"connect从context的store中调用getState,返回值作为参数给mapStateToProps。"),Object(a.b)("li",{parentName:"ul"},"mapStateToProps函数执行的返回值用于初始化this.state,之后传递给被包裹组件。"),Object(a.b)("li",{parentName:"ul"},"对于dispatch映射分为两种情况,如果mapDispatchToProps是一个对象,就需要用bingActionCreators绑定"),Object(a.b)("li",{parentName:"ul"},"如果mapDispatchToProps是一个函数,就给这个函数传递dispatch参数并调用,最后返回的actions传递给被包裹的组件。"),Object(a.b)("li",{parentName:"ul"},"最终,将映射完的组件返回。")),Object(a.b)("h2",null,"源码压缩包"),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},Object(a.b)("a",Object.assign({parentName:"li"},{href:"https://github.com/lengyuexin/code"}),"https://github.com/lengyuexin/code"))),Object(a.b)("h2",null,"再会"),Object(a.b)("p",null,"情如风雪无常,"),Object(a.b)("p",null,"却是一动既殇。"),Object(a.b)("p",null,"感谢你这么好看还来阅读我的文章,"),Object(a.b)("p",null,"我是冷月心,下期再见。"))}s.isMDXComponent=!0}}]);
//# sourceMappingURL=component---src-pages-react-redux-index-mdx-043eb5a498f7f9c4e9ec.js.map