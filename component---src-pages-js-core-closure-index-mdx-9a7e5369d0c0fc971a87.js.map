{"version":3,"sources":["webpack:///./src/pages/js-core/closure/index.mdx","webpack:///./node_modules/_@babel_runtime@7.12.5@@babel/runtime/helpers/esm/objectWithoutPropertiesLoose.js"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent","_objectWithoutPropertiesLoose","source","excluded","key","i","target","sourceKeys","Object","keys","length","indexOf"],"mappings":"wPASaA,EAAe,GACtBC,EAAc,CAClBD,gBAEIE,EAAYC,UACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,EACF,8BACD,OAAO,YAACJ,EAAD,iBAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAI5E,gCACA,YAAC,IAAD,CAAGA,QAAQ,KAAX,6EAE+B,uBAF/B,uDAGgD,uBAHhD,oHAOyB,wBAEzB,qCACA,uBAAK,kCAAMC,WAAW,OAAU,CAC5B,UAAa,gBADZ,6hCA2CTJ,EAAWK,gBAAiB,G,kCC5Eb,SAASC,EAA8BC,EAAQC,GAC5D,GAAc,MAAVD,EAAgB,MAAO,GAC3B,IAEIE,EAAKC,EAFLC,EAAS,GACTC,EAAaC,OAAOC,KAAKP,GAG7B,IAAKG,EAAI,EAAGA,EAAIE,EAAWG,OAAQL,IACjCD,EAAMG,EAAWF,GACbF,EAASQ,QAAQP,IAAQ,IAC7BE,EAAOF,GAAOF,EAAOE,IAGvB,OAAOE,EAZT","file":"component---src-pages-js-core-closure-index-mdx-9a7e5369d0c0fc971a87.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nimport DefaultLayout from \"C:/Users/lengy/Desktop/gatsby-blog/src/components/BlogLayout/index.js\";\nimport P from '../../../components/Panel.js';\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n\n    <h3>{`如何理解闭包`}</h3>\n    <P mdxType=\"P\">\n定义一个函数，函数内部的变量沿着作用域链查找，可以访问非当前作用域下的变量。\n这种情况下就是形成了闭包，该函数内引用非当前作用域的变量称为闭包变量。<br />\n在v8引擎内部，解析函数的时候会进行一次预检查，当识别到闭包的存在后，会将其引用的变量复制一份到堆内存。<br />\n外层函数执行完出栈后，内部变量被释放。\n但闭包变量此时引用已经指向堆内存，所以依旧可用。\n堆内存空间也不是无限大的，如果积累到一定程度又得不到释放，就会造成内存泄漏。\n闭包常见作用是变量私有化和缓存(如webpack同步加载)<br />\n    </P>\n    <h3>{`webpack同步加载`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`(function (modules) {\n    //模块缓存\n    var installedModules = {}\n    //自己实现的__webpack_require__ 取代原生的require\n    function __webpack_require__(moduleId) {\n        //命中缓存 直接返回\n        if (installedModules[moduleId]) {\n            return installedModules[moduleId].exports\n        }\n        //未命中缓存 添加\n        var module = installedModules[moduleId] = {\n            id: moduleId,//模块id\n            load: false,//默认模块没有被加载,\n            exports: {},//导出的内容\n        }\n        //加载对应模块\n        modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n        module.load = true//已经加载\n        return module.exports\n\n    }\n    //加载入口模块\n    return __webpack_require__('./src/index.js')\n\n})(\n\n    {\n        './src/index.js': (function (module, exports, __webpack_require__) {\n            const title = __webpack_require__('./src/title.js')\n            console.log(title)\n        }),\n        './src/title.js': (function (module, exports,) {\n            module.exports = 'hello'\n        })\n    })\n\n`}</code></pre>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      ","export default function _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}"],"sourceRoot":""}