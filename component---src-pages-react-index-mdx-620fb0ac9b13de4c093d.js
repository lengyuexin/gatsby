(window.webpackJsonp=window.webpackJsonp||[]).push([[53],{urfq:function(e,n,t){"use strict";t.r(n),t.d(n,"_frontmatter",(function(){return c})),t.d(n,"default",(function(){return s}));t("rGqo"),t("yt8O"),t("Btvt"),t("RW0V"),t("91GP"),t("q1tI");var a=t("7ljp"),l=t("Hv6d");var c={},r={_frontmatter:c},o=l.a;function s(e){var n=e.components,t=function(e,n){if(null==e)return{};var t,a,l={},c=Object.keys(e);for(a=0;a<c.length;a++)t=c[a],n.indexOf(t)>=0||(l[t]=e[t]);return l}(e,["components"]);return Object(a.b)(o,Object.assign({},r,t,{components:n,mdxType:"MDXLayout"}),Object(a.b)("h2",null,"前言"),Object(a.b)("p",null,"react核心其实挺多的，但面试能说上元素创建和基本渲染过程基本就算合格。\n而在此基础上，能说清楚diff算法的三层比较策略，15.x的递归不可打断更新和\n16.x以后的循环可打断更新，又是一波加分项。"),Object(a.b)("p",null,"本篇为源码系列核心实现第七篇,对应下图react部分。"),Object(a.b)("p",null,Object(a.b)("img",Object.assign({parentName:"p"},{src:"https://lengyuexin.github.io/gatsby/static/src-c54cf51e73a8fdc229c79ea7b981b607.png",alt:"src"}))),Object(a.b)("p",null,"本篇不会像之前的那些细致化的去写，因为我发现了一个写的十分优秀的库，就不献丑了。"),Object(a.b)("h2",null,"createElement"),Object(a.b)("p",null,"大道至极，这个其实就是虚拟dom，一个用于描述真实dom结构的js对象。"),Object(a.b)("pre",null,Object(a.b)("code",Object.assign({parentName:"pre"},{className:"language-js"}),"\nfunction createElement( tag, attrs={}, ...children ) {\n    return {\n        tag,\n        attrs,\n        children,\n    }\n}\n\n\n\n")),Object(a.b)("h2",null,"render"),Object(a.b)("p",null,"render做了很多事，但最主要的是把上边创建的虚拟dom转化成真实dom。\n当然，这之中还会涉及事件绑定，样式处理，diff算法什么的，这里只做一个简化展示。"),Object(a.b)("pre",null,Object(a.b)("code",Object.assign({parentName:"pre"},{className:"language-js"}),"\nfunction render( vnode, container ) {\n    \n    // 当vnode为字符串时，渲染结果是一段文本\n    if ( typeof vnode === 'string' ) {\n        const textNode = document.createTextNode( vnode );\n        return container.appendChild( textNode );\n    }\n\n    const dom = document.createElement( vnode.tag );\n\n    if ( vnode.attrs ) {\n        Object.keys( vnode.attrs ).forEach( key => {\n            const value = vnode.attrs[ key ];\n             setAttribute( dom, key, value );    // 设置属性\n        } );\n    }\n    // 递归渲染子节点\n    vnode.children.forEach( child => render( child, dom ) );  \n    // 将渲染结果挂载到真正的DOM上\n    return container.appendChild( dom );   \n}\n\n\nfunction setAttribute( dom, name, value ) {\n    // 如果属性名是className，则改回class\n    if ( name === 'className' ) name = 'class';\n    // 如果属性名是onXXX，则是一个事件监听方法\n    if ( /on\\w+/.test( name ) ) {\n        name = name.toLowerCase();\n        dom[ name ] = value || '';\n    // 如果属性名是style，则更新style对象\n    } else if ( name === 'style' ) {\n        if ( !value || typeof value === 'string' ) {\n            dom.style.cssText = value || '';\n        } else if ( value && typeof value === 'object' ) {\n            for ( let name in value ) {\n                // 可以通过style={ width: 20 }这种形式来设置样式，可以省略掉单位px\n                dom.style[ name ] = typeof value[ name ] === 'number' ?\n                 value[ name ] + 'px' : value[ name ];\n            }\n        }\n    // 普通属性则直接更新属性\n    } else {\n        if ( name in dom ) {\n            dom[ name ] = value || '';\n        }\n        if ( value ) {\n            dom.setAttribute( name, value );\n        } else {\n            dom.removeAttribute( name );\n        }\n    }\n}\n\n\n")),Object(a.b)("h2",null,"相关链接"),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},Object(a.b)("a",Object.assign({parentName:"li"},{href:"https://github.com/lengyuexin/simple-react"}),"https://github.com/lengyuexin/simple-react"))),Object(a.b)("h2",null,"再会"),Object(a.b)("p",null,"情如风雪无常,"),Object(a.b)("p",null,"却是一动既殇。"),Object(a.b)("p",null,"感谢你这么好看还来阅读我的文章,"),Object(a.b)("p",null,"我是冷月心,下期再见。"))}s.isMDXComponent=!0}}]);
//# sourceMappingURL=component---src-pages-react-index-mdx-620fb0ac9b13de4c093d.js.map