(window.webpackJsonp=window.webpackJsonp||[]).push([[55],{RvRB:function(e,n,t){"use strict";t.r(n),t.d(n,"_frontmatter",(function(){return l})),t.d(n,"default",(function(){return u}));t("rGqo"),t("yt8O"),t("Btvt"),t("RW0V"),t("91GP"),t("q1tI");var b=t("7ljp"),c=t("Hv6d");var l={},a={_frontmatter:l},s=c.a;function u(e){var n=e.components,t=function(e,n){if(null==e)return{};var t,b,c={},l=Object.keys(e);for(b=0;b<l.length;b++)t=l[b],n.indexOf(t)>=0||(c[t]=e[t]);return c}(e,["components"]);return Object(b.b)(s,Object.assign({},a,t,{components:n,mdxType:"MDXLayout"}),Object(b.b)("h2",null,"背景"),Object(b.b)("p",null,"近期开发的模块上线后，测试过程中发现了一个bad case。"),Object(b.b)("p",null,"前端调用了一个查询服务接口，然后整个服务cpu 立即飙升到100%，甚至以上。"),Object(b.b)("p",null,"这直接导致线上服务处于瘫痪状态，一群oncall就干过来了，好慌。"),Object(b.b)("p",null,Object(b.b)("img",Object.assign({parentName:"p"},{src:"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/3144d6c798f14e0c85c7b4cd3fcc1a6e~tplv-k3u1fbpfcp-zoom-1.image",alt:null}))),Object(b.b)("h2",null,"成因"),Object(b.b)("p",null,"根本原因是调用了lodash的uniqWith和isEqual方法对",Object(b.b)("strong",{parentName:"p"},"大数据量"),"且",Object(b.b)("strong",{parentName:"p"},"重复率不高的数据"),"进行深度去重。"),Object(b.b)("p",null,"github上也有一个相关的",Object(b.b)("a",Object.assign({parentName:"p"},{href:"https://github.com/lodash/lodash/issues/5254"}),"issue.")),Object(b.b)("p",null,Object(b.b)("img",Object.assign({parentName:"p"},{src:"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/defd2c10c1b84546ab159ae1c3e5e6c6~tplv-k3u1fbpfcp-watermark.image?",alt:"image.png"}))),Object(b.b)("pre",null,Object(b.b)("code",Object.assign({parentName:"pre"},{className:"language-js"}),"import {uniqWith, isEqual} from 'lodash'\n// example\nconst objects = [ \n{ x: 1, y: 2 }, \n{ x: 2, y: 1 },\n{ x: 1, y: 2 },\n]; \n\nuniqWith(objects, isEqual); \n// => [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }]\n")),Object(b.b)("p",null,"在 uniqWith 中，调用了isEqual进行两两比较。"),Object(b.b)("pre",null,Object(b.b)("code",Object.assign({parentName:"pre"},{}),"isEqual(objects[0], objects[1])\nisEqual(objects[0], objects[2])\nisEqual(objects[1], objects[2])\n")),Object(b.b)("p",null,"线上数据高达5w,但并不足以说明是数量级导致的。"),Object(b.b)("p",null,"还有一个重要因素会增加比对耗时，",Object(b.b)("strong",{parentName:"p"},"重复率"),"。"),Object(b.b)("p",null,"如果重复率极低，几万的数量，还不足以让cpu占满。"),Object(b.b)("pre",null,Object(b.b)("code",Object.assign({parentName:"pre"},{className:"language-js"})," function test(){\n   const obj = {\n      x: 1,\n      y: 2,\n    };\n    const arr = [];\n    for (let i = 0; i < 50000; i++) {\n      arr.push(obj);\n    }\n    return lodash.uniqWith(arr, lodash.isEqual);\n  }\n    console.time('重复率测试');\n    test();\n    console.timeEnd('重复率测试');\n    // 重复率测试: 4.779ms\n")),Object(b.b)("h2",null,"复现demo"),Object(b.b)("p",null,"为了更直观的感受这个过程，我写了如下示例代码。仅有几行，但足以复现。"),Object(b.b)("pre",null,Object(b.b)("code",Object.assign({parentName:"pre"},{className:"language-js"}),"const { uniqWith, isEqual } = require('lodash');\nconst http = require('http');\nhttp\n  .createServer(async (req, res) => {\n    const arr = [];\n    for (let i = 0; i < 10000; i++) {\n      arr.push({\n        n: Math.random() * 20000,\n        m: Math.random() * 20000,\n      });\n    }\n    console.log(uniqWith(arr, isEqual));\n    res.end('hello world');\n  })\n  .listen(3000);\n\n")),Object(b.b)("p",null,"node执行完上述代码后，可在终端使用",Object(b.b)("strong",{parentName:"p"},"top"),"命令观察cpu占用情况。"),Object(b.b)("h2",null,"解决方案"),Object(b.b)("p",null,"最直接的方案是放弃uniqWith和isEqual。"),Object(b.b)("p",null,"需要进一步思考的点有三个："),Object(b.b)("ul",null,Object(b.b)("li",{parentName:"ul"},"如此庞大的数据量是否合理？"),Object(b.b)("li",{parentName:"ul"},"既然重复率如此低，近乎没有重复，是否有去重必要？"),Object(b.b)("li",{parentName:"ul"},"能否从数据源头上控制不出现重复数据？哪怕重复的只有一两条。")),Object(b.b)("p",null,"结合我经历的这个场景，排查完业务逻辑后发现真实数据量不会这么大，重复的数据很少，且可以从源头上控制。"),Object(b.b)("h2",null,"再会"),Object(b.b)("p",null,"情如风雪无常,"),Object(b.b)("p",null,"却是一动即殇。"),Object(b.b)("p",null,"感谢你这么好看还来阅读我的文章,"),Object(b.b)("p",null,"我是冷月心,下期再见。"))}u.isMDXComponent=!0}}]);
//# sourceMappingURL=component---src-pages-online-fatal-index-mdx-79597f87ad525670e9de.js.map