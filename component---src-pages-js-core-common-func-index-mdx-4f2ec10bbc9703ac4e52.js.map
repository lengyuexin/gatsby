{"version":3,"sources":["webpack:///./src/pages/js-core/common-func/index.mdx"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","style","background","parentName","isMDXComponent"],"mappings":"4RAOO,IAAMA,EAAe,GAOtBC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,E,oIACF,mBACD,OAAO,YAACJ,EAAD,iBAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAI5E,4BACA,YAAC,IAAD,CAAGC,MAAO,CACRC,WAAY,WACXF,QAAQ,KACT,uBAAK,kCAAMG,WAAW,OAAU,CAC5B,UAAa,gBADZ,iNAcP,4BACA,YAAC,IAAD,CAAGF,MAAO,CACRC,WAAY,WACXF,QAAQ,KACT,uBAAK,kCAAMG,WAAW,OAAU,CAC5B,UAAa,gBADZ,mPAeP,+BACA,YAAC,IAAD,CAAGF,MAAO,CACRC,WAAY,WACXF,QAAQ,KACT,uBAAK,kCAAMG,WAAW,OAAU,CAC5B,UAAa,gBADZ,yZAoBP,+BACA,YAAC,IAAD,CAAGF,MAAO,CACRC,WAAY,WACXF,QAAQ,KACT,uBAAK,kCAAMG,WAAW,OAAU,CAC5B,UAAa,gBADZ,6hBA2BP,+BACA,YAAC,IAAD,CAAGF,MAAO,CACRC,WAAY,WACXF,QAAQ,KACT,uBAAK,kCAAMG,WAAW,OAAU,CAC5B,UAAa,gBADZ,4nBAgCP,6BACA,YAAC,IAAD,CAAGF,MAAO,CACRC,WAAY,WACXF,QAAQ,KACT,uBAAK,kCAAMG,WAAW,OAAU,CAC5B,UAAa,gBADZ,qcAwBXN,EAAWO,gBAAiB","file":"component---src-pages-js-core-common-func-index-mdx-4f2ec10bbc9703ac4e52.js","sourcesContent":["import React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/Users/bytedance/Desktop/gatsby/src/components/BlogLayout/index.js\";\nimport P from '../../../components/Panel.js';\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n\n    <h2>{`防抖`}</h2>\n    <P style={{\n      background: '#FDB99B'\n    }} mdxType=\"P\">\n      <pre><code parentName=\"pre\" {...{\n          \"className\": \"language-js\"\n        }}>{`const debounce = (fn, wait) => {\n    let timer = null\n    return (...args) => {\n        clearTimeout(timer)\n        timer = setTimeout(() => {\n            fn(...args)\n        }, wait)\n\n    }\n}\n`}</code></pre>\n    </P>\n    <h2>{`节流`}</h2>\n    <P style={{\n      background: '#FDB99B'\n    }} mdxType=\"P\">\n      <pre><code parentName=\"pre\" {...{\n          \"className\": \"language-js\"\n        }}>{`const throttle = (fn, wait) => {\n    let lock = false\n    return (...args) => {\n        if (lock) return\n        lock = true\n        setTimeout(() => {\n            fn(...args)\n            lock = false\n        }, wait)\n    }\n}\n`}</code></pre>\n    </P>\n    <h2>{`防抖+节流`}</h2>\n    <P style={{\n      background: '#FDB99B'\n    }} mdxType=\"P\">\n      <pre><code parentName=\"pre\" {...{\n          \"className\": \"language-js\"\n        }}>{`const handle=(fn, delay)=> {\n    let last = 0, timer = null;\n    return (...args) => {\n        let now = new Date();\n        if (now - last < delay) {\n            clearTimeout(timer);\n            timer = setTimeout(() => {\n                last = now;\n                fn(...args);\n            }, delay);\n        } else {\n            last = now;\n            fn(...args);\n        }\n    }\n}\n`}</code></pre>\n    </P>\n    <h2>{`图片懒加载`}</h2>\n    <P style={{\n      background: '#FDB99B'\n    }} mdxType=\"P\">\n      <pre><code parentName=\"pre\" {...{\n          \"className\": \"language-js\"\n        }}>{`\n// 获取所有的图片标签\nvar imgs = document.getElementsByTagName('img')\n// 获取可视区域的高度\nvar clientHeight = document.documentElement.clientHeight\n// num用于统计当前显示到了哪一张图片，避免重复加载\nvar num = 0\nfunction lazyload() {\n    for (let i = num; i < imgs.length; i++) {\n\n        // 可视区域高度>=元素顶部距离可视区域顶部的高度 ,显示图片\n        if (clientHeight >= imgs[i].getBoundingClientRect().top) {\n            // 地址替换 \n            imgs[i].src = imgs[i].getAttribute('data-src');\n            // 更新num\n            num += 1;\n        }\n    }\n}\n\n//初始化\nlazyload();\n\n`}</code></pre>\n    </P>\n    <h2>{`图片预加载`}</h2>\n    <P style={{\n      background: '#FDB99B'\n    }} mdxType=\"P\">\n      <pre><code parentName=\"pre\" {...{\n          \"className\": \"language-js\"\n        }}>{`\nfunction preload() {\n    const img = document.querySelector(\"img\")\n  \n    //定义图片加载数量\n    let count = 0;\n    //定义当前图片数组长度\n    const len = imgs.length;\n    //遍历图片数组，引入预加载处理\n    imgs.forEach(item => {\n        /*代理模式体现--start*/\n        const imgObj = new Image();\n        //使用imgObj模拟真实img完成加载\n        imgObj.onload = () => {\n            //所有图片加载完成，将loading替换成第一张图\n            if (count === len - 1) {\n                img.src = imgs[0];\n            }\n            // 每张图片加载完成，count+1\n            count++\n        }\n        //使用imgObj模拟真实img发起请求\n        imgObj.src = item;\n        /*代理模式体现--end*/\n    })\n}\n\n\n`}</code></pre>\n    </P>\n    <h2>{`深拷贝`}</h2>\n    <P style={{\n      background: '#FDB99B'\n    }} mdxType=\"P\">\n      <pre><code parentName=\"pre\" {...{\n          \"className\": \"language-js\"\n        }}>{`\nfunction clone(target, map = new Map()) {\n    if (typeof target === 'object') {\n        let cloneTarget = Array.isArray(target) ? [] : {};\n        if (map.get(target)) {\n            return map.get(target);\n        }\n        map.set(target, cloneTarget);\n        for (const key in target) {\n            cloneTarget[key] = clone(target[key], map);\n        }\n        return cloneTarget;\n    } else {\n        return target;\n    }\n};\n`}</code></pre>\n    </P>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}