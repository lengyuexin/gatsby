{"version":3,"sources":["webpack:///./src/pages/graph/index.mdx"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"mappings":"gRAMO,IAAMA,EAAe,GAOtBC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,E,oIACF,mBACD,OAAO,YAACJ,EAAD,iBAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAG5E,4BACA,sDACA,6CACA,6DACA,8DACA,oCACA,iCACA,sEACA,0DACA,+CACA,kCACA,8BACA,2BACA,8DACA,2DACA,2BACA,wDACA,iCACA,yBACE,qBAAOC,WAAW,SAChB,kBAAIA,WAAW,SACb,gCAAIA,WAAW,MAAS,CACtB,MAAS,QAEX,gCAAIA,WAAW,MAAS,CACtB,MAAS,QAEX,gCAAIA,WAAW,MAAS,CACtB,MAAS,UAIf,qBAAOA,WAAW,SAChB,kBAAIA,WAAW,SACb,gCAAIA,WAAW,MAAS,CACtB,MAAS,OADX,OAGA,gCAAIA,WAAW,MAAS,CACtB,MAAS,OADX,OAGA,gCAAIA,WAAW,MAAS,CACtB,MAAS,OADX,QAIF,kBAAIA,WAAW,SACb,gCAAIA,WAAW,MAAS,CACtB,MAAS,OADX,cAGA,gCAAIA,WAAW,MAAS,CACtB,MAAS,OADX,iBAGA,gCAAIA,WAAW,MAAS,CACtB,MAAS,OADX,qBAMN,4BACA,gEACA,iDACA,qBAAG,iCAAKA,WAAW,KAAQ,CACvB,IAAO,gNACP,IAAO,SAEX,sBACE,kBAAIA,WAAW,MAAf,iBACA,kBAAIA,WAAW,MAAf,aACA,kBAAIA,WAAW,MAAf,oDAEF,8BACA,qBAAG,sBAAQA,WAAW,KAAnB,mBACH,8BACE,iBAAGA,WAAW,cAAd,2CAEF,qBAAG,sBAAQA,WAAW,KAAnB,sBACH,8BACE,iBAAGA,WAAW,cAAd,kDAEF,8BACA,wDACA,oDACA,yDACA,gDACA,qDACF,iCAAKA,WAAW,KAAQ,CAClB,IAAO,gNACP,IAAO,SAEX,8BACA,iEACA,yDACA,qCACA,+BACA,8DACA,uBAAK,kCAAMA,WAAW,OAAU,IAA3B,iGAKL,+BACA,wDACA,mDACA,uBAAK,kCAAMA,WAAW,OAAU,IAA3B,uDAEL,kCACA,iCAAgB,0BAAYA,WAAW,KAAvB,uBAChB,uBAAK,kCAAMA,WAAW,OAAU,IAA3B,mEAEL,qCACA,oCACA,uBAAK,kCAAMA,WAAW,OAAU,IAA3B,+DAEL,mCACA,6CACA,8CACA,uBAAK,kCAAMA,WAAW,OAAU,IAA3B,mEAEL,0CACA,oDACA,uBAAK,kCAAMA,WAAW,OAAU,IAA3B,kRAOL,4BACA,sCAAqB,+BAAGA,WAAW,KAAQ,CACvC,KAAQ,mEADS,0BAGrB,uCAAsB,+BAAGA,WAAW,KAAQ,CACxC,KAAQ,iCADU,gBAGtB,4BACA,gCACA,gCACA,yCACA,qCAKJJ,EAAWK,gBAAiB","file":"component---src-pages-graph-index-mdx-71c9d1179c67f2a600a7.js","sourcesContent":["import React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/Users/bytedance/Desktop/gatsby/src/components/BlogLayout/index.js\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h2>{`前言`}</h2>\n    <p>{`在字节内部，有一个自研的图数据库，叫做bytegrpah。`}</p>\n    <p>{`刚好近期业务有用到，使用体验还是很棒的。`}</p>\n    <p>{`不论是语法理解还是逻辑便捷性，在特定场景下，确实比关系型数据库更有优势。`}</p>\n    <p>{`本文以bytegraph为例,介绍下图数据库的概念，落地场景以及基本使用。`}</p>\n    <p>{`希望本文对你有所帮助。`}</p>\n    <h2>{`图数据库是什么`}</h2>\n    <p>{`顾名思义，图数据库也是数据库。这就意味着，它具有数据库的一些共性。比如事务，增删改查操作。`}</p>\n    <p>{`不同于关系型数据库，它存储的是由点和边以及附加属性构成的逻辑关系。`}</p>\n    <p>{`当这些逻辑关系连在一起时，就构成了一张图谱。`}</p>\n    <p>{`这，就是图数据库。`}</p>\n    <h2>{`核心概念`}</h2>\n    <h3>{`点`}</h3>\n    <p>{`一般来说，可以把点对应到关系型数据库中的表，其实就是一个实体(比如用户)。`}</p>\n    <p>{`每一张表中存储的数据必然是相同结构，图数据中存储的同类型点也是如此。`}</p>\n    <h3>{`边`}</h3>\n    <p>{`两点之间建立关联指向的连线则为边，包含正向边，反向边和双向边。`}</p>\n    <p>{`以关注关系为例:`}</p>\n    <table>\n      <thead parentName=\"table\">\n        <tr parentName=\"thead\">\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}></th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}></th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}></th>\n        </tr>\n      </thead>\n      <tbody parentName=\"table\">\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`正向边`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`反向边`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`双向边`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`A关注B(A->B)`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`B被A 关注(B <-A)`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`A与B互相关注(A<=>B)`}</td>\n        </tr>\n      </tbody>\n    </table>\n    <h3>{`属性`}</h3>\n    <p>{`图数据库的属性就如同关系型数据库中表的各个字段一样，只不过它附加在了点和边上。`}</p>\n    <p>{`下面用一张图介绍下点，边，属性是如何建立关联的。`}</p>\n    <p><img parentName=\"p\" {...{\n        \"src\": \"https://img-blog.csdnimg.cn/50f114f7344e4162b0b0cbc407856854.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyODEzNDkx,size_16,color_FFFFFF,t_70\",\n        \"alt\": null\n      }}></img></p>\n    <ul>\n      <li parentName=\"ul\">{`player,team是点`}</li>\n      <li parentName=\"ul\">{`两点中间的指向为边`}</li>\n      <li parentName=\"ul\">{`id,name,age为点的属性，serve,start_year,end_year为边的属性`}</li>\n    </ul>\n    <h2>{`通用概念`}</h2>\n    <p><strong parentName=\"p\">{`n跳查询:沿着指定链路查n次`}</strong></p>\n    <blockquote>\n      <p parentName=\"blockquote\">{`查询A的关注，是一跳查询。查询A的关注中B的关注，是两跳查询。以此类推...`}</p>\n    </blockquote>\n    <p><strong parentName=\"p\">{`入边和出边：箭头起为出边，止为入边`}</strong></p>\n    <blockquote>\n      <p parentName=\"blockquote\">{`对于上图中点player而言，边serve是出边；对于点team而言，边serve是入边。`}</p>\n    </blockquote>\n    <h2>{`落地场景`}</h2>\n    <p>{`一句话，一旦你的业务场景存在图的关系，就有考虑图数据库的必要。`}</p>\n    <p>{`比如抖音，微博的粉丝关注关系，这个就是经典的落地场景。`}</p>\n    <p>{`人带有明显的社会属性，每个人都可以关注别人，也可以被其他人关注。`}</p>\n    <p>{`当这种复杂的关注关系串联起来，其实就是一张图。`}</p>\n    <p>{`在前端图谱展现上，可以配合g6使用，定制点边结构即可。\n`}<img parentName=\"p\" {...{\n        \"src\": \"https://img-blog.csdnimg.cn/e77c34c7a9ed4169b055d4728c1c71f3.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyODEzNDkx,size_16,color_FFFFFF,t_70\",\n        \"alt\": null\n      }}></img></p>\n    <h2>{`基本使用`}</h2>\n    <p>{`在使用上，bytegraph采用germlin查询语言，可以把这个当成sql用。`}</p>\n    <p>{`看似是学习一个新的东西，但成本不高，这个理解上比sql直观许多。`}</p>\n    <p>{`下面来看几个常用操作吧。`}</p>\n    <h3>{`添加一个点`}</h3>\n    <p>{`在bytegraph中，使用id和type确定一个点，这个是可以自定义的。`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`  g.addV()\n  .property('id',A.id)\n  .property('type',A.type)\n  .property('name',A.name)\n`}</code></pre>\n    <h3>{`建立一条边`}</h3>\n    <p>{`很好理解的form和to，在给定的A,B两点之间建立边的指向。`}</p>\n    <p>{`边的名字unit也是可以自定义的，比如follow。`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`g.addE('unit').from(A.id,A.type).to(B.id,B.type)\n`}</code></pre>\n    <h3>{`查询某个点的属性`}</h3>\n    <p>{`类似mysql中的`}<inlineCode parentName=\"p\">{`select name from A`}</inlineCode></p>\n    <pre><code parentName=\"pre\" {...{}}>{`g.V().has(\"id\", A.id).has(\"type\", A.type).properties(\"name\")\n`}</code></pre>\n    <h3>{`查询某个点的出边和入边`}</h3>\n    <p>{`假定该边名为unit。`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`g.V().has('id', A.id).has('type',A.type).bothE('unit')\\`;\n`}</code></pre>\n    <h3>{`清除某个点的出入边`}</h3>\n    <p>{`一般来说，点不会被删，最多删除点的属性。`}</p>\n    <p>{`如果要清除点之间的联系，去掉其出入边即可。`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`g.V().has('id',A.id).has('type',A.type).bothE('unit').drop()\n`}</code></pre>\n    <h3>{`A所在关注关系联通子图上的所有人`}</h3>\n    <p>{`这个应该是最为经典的使用了，查询所有关联，最高跳查询。`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`g.V().has(\"id\", A.id).has(\"type\", A.type)\n .repeat(             // repeat()表示表示迭代从A找关注or被关注的人\n        both(\"follow\")\n        .simplePath()) // simplePath()是过滤条件，出现环则过滤掉\n .emit()    // emit()表示输出每个遍历到的点，\n .times(10)  //times(10)设置一个足够大的循环次数，当循环找不到新的点时，repeat会自动结束\n`}</code></pre>\n    <h2>{`更多`}</h2>\n    <p>{`更多bytegraph介绍：`}<a parentName=\"p\" {...{\n        \"href\": \"https://blog.csdn.net/ByteDanceTech/article/details/104509642/\"\n      }}>{`字节跳动自研万亿级图数据库 & 图计算实践`}</a></p>\n    <p>{`更多gremlin语法介绍: `}<a parentName=\"p\" {...{\n        \"href\": \"http://tinkerpop-gremlin.cn/\"\n      }}>{`Gremlin中文文档`}</a></p>\n    <h2>{`再会`}</h2>\n    <p>{`情如风雪无常,`}</p>\n    <p>{`却是一动即殇。`}</p>\n    <p>{`感谢你这么好看还来阅读我的文章,`}</p>\n    <p>{`我是冷月心,下期再见。`}</p>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}