{"version":3,"sources":["webpack:///./src/pages/network/http-team-leader-blocked/index.mdx"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","style","background","parentName","isMDXComponent"],"mappings":"4RAOO,IAAMA,EAAe,GAOtBC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,E,oIACF,mBACD,OAAO,YAACJ,EAAD,iBAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAI5E,4BACA,YAAC,IAAD,CAAOC,MAAO,CACZC,WAAY,aACXF,QAAQ,SAFX,0FAQA,8BACA,qBAAG,sBAAQG,WAAW,KAAnB,SACH,YAAC,IAAD,CAAOH,QAAQ,SAAf,8CAGA,qBAAG,sBAAQG,WAAW,KAAnB,eACH,YAAC,IAAD,CAAOH,QAAQ,SAAf,4DAGA,4BACA,YAAC,IAAD,CAAOC,MAAO,CACZC,WAAY,QACXF,QAAQ,SAFX,4FAUJH,EAAWO,gBAAiB","file":"component---src-pages-network-http-team-leader-blocked-index-mdx-169f2417d62ad2d209ba.js","sourcesContent":["import React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/Users/bytedance/Desktop/gatsby/src/components/BlogLayout/index.js\";\nimport Panel from '../../../components/Panel.js';\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n\n    <h2>{`成因`}</h2>\n    <Panel style={{\n      background: 'lightblue'\n    }} mdxType=\"Panel\">\n  HTTP传输是基于请求-响应模式，报文必须是一发一收。\n  每个请求都在一个队列中维护，先进先出。\n  如果队首的请求处理太慢，就会阻塞后面请求的处理。\n  由此，就此形成了队头阻塞。\n </Panel>   \n    <h2>{`解决方案`}</h2>\n    <p><strong parentName=\"p\">{`域名分片`}</strong></p>\n    <Panel mdxType=\"Panel\">\n    增加多个域名，每个域名一次最多六个tcp连接，理论上支持的最大并发tcp连接数是6n\n </Panel>   \n    <p><strong parentName=\"p\">{`http/2多路复用`}</strong></p>\n    <Panel mdxType=\"Panel\">\n将报文转成具有id标识的二进制数据帧，接收后按照id组合成完整报文,全过程在同一个tcp连接上完成双向数据帧传输\n    </Panel> \n    <h2>{`注意`}</h2>\n    <Panel style={{\n      background: 'pink'\n    }} mdxType=\"Panel\">\n以上解决方案都是针对应用层，不是传输层(tcp)。tcp层面的队头阻塞是如果前一个报文没有收到便不会将后面收到的报文上传给 HTTP。\n根本上解决需要更换协议，如换成udp。\n    </Panel> \n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}