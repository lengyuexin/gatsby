{"version":3,"sources":["webpack:///./src/pages/react/index.mdx"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"mappings":"gRAMO,IAAMA,EAAe,GAOtBC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,E,oIACF,mBACD,OAAO,YAACJ,EAAD,iBAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAG5E,4BACA,gIAGA,oDACA,qBAAG,iCAAKC,WAAW,KAAQ,CACvB,IAAO,sFACP,IAAO,UAEX,iEACA,uCACA,6DACA,uBAAK,kCAAMA,WAAW,OAAU,CAC5B,UAAa,gBADZ,8IAcL,gCACA,0GAEA,uBAAK,kCAAMA,WAAW,OAAU,CAC5B,UAAa,gBADZ,opDA2DL,8BACA,sBACE,kBAAIA,WAAW,MAAK,+BAAGA,WAAW,MAAS,CACvC,KAAQ,+CADQ,gDAItB,4BACA,gCACA,gCACA,yCACA,qCAKJJ,EAAWK,gBAAiB","file":"component---src-pages-react-index-mdx-778e55e930e820e90c2b.js","sourcesContent":["import React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/Users/bytedance/Desktop/gatsby/src/components/BlogLayout/index.js\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h2>{`前言`}</h2>\n    <p>{`react核心其实挺多的，但面试能说上元素创建和基本渲染过程基本就算合格。\n而在此基础上，能说清楚diff算法的三层比较策略，15.x的递归不可打断更新和\n16.x以后的循环可打断更新，又是一波加分项。`}</p>\n    <p>{`本篇为源码系列核心实现第七篇,对应下图react部分。`}</p>\n    <p><img parentName=\"p\" {...{\n        \"src\": \"https://lengyuexin.github.io/gatsby/static/src-c54cf51e73a8fdc229c79ea7b981b607.png\",\n        \"alt\": \"src\"\n      }}></img></p>\n    <p>{`本篇不会像之前的那些细致化的去写，因为我发现了一个写的十分优秀的库，就不献丑了。`}</p>\n    <h2>{`createElement`}</h2>\n    <p>{`大道至极，这个其实就是虚拟dom，一个用于描述真实dom结构的js对象。`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`\nfunction createElement( tag, attrs={}, ...children ) {\n    return {\n        tag,\n        attrs,\n        children,\n    }\n}\n\n\n\n`}</code></pre>\n    <h2>{`render`}</h2>\n    <p>{`render做了很多事，但最主要的是把上边创建的虚拟dom转化成真实dom。\n当然，这之中还会涉及事件绑定，样式处理，diff算法什么的，这里只做一个简化展示。`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`\nfunction render( vnode, container ) {\n    \n    // 当vnode为字符串时，渲染结果是一段文本\n    if ( typeof vnode === 'string' ) {\n        const textNode = document.createTextNode( vnode );\n        return container.appendChild( textNode );\n    }\n\n    const dom = document.createElement( vnode.tag );\n\n    if ( vnode.attrs ) {\n        Object.keys( vnode.attrs ).forEach( key => {\n            const value = vnode.attrs[ key ];\n             setAttribute( dom, key, value );    // 设置属性\n        } );\n    }\n    // 递归渲染子节点\n    vnode.children.forEach( child => render( child, dom ) );  \n    // 将渲染结果挂载到真正的DOM上\n    return container.appendChild( dom );   \n}\n\n\nfunction setAttribute( dom, name, value ) {\n    // 如果属性名是className，则改回class\n    if ( name === 'className' ) name = 'class';\n    // 如果属性名是onXXX，则是一个事件监听方法\n    if ( /on\\\\w+/.test( name ) ) {\n        name = name.toLowerCase();\n        dom[ name ] = value || '';\n    // 如果属性名是style，则更新style对象\n    } else if ( name === 'style' ) {\n        if ( !value || typeof value === 'string' ) {\n            dom.style.cssText = value || '';\n        } else if ( value && typeof value === 'object' ) {\n            for ( let name in value ) {\n                // 可以通过style={ width: 20 }这种形式来设置样式，可以省略掉单位px\n                dom.style[ name ] = typeof value[ name ] === 'number' ?\n                 value[ name ] + 'px' : value[ name ];\n            }\n        }\n    // 普通属性则直接更新属性\n    } else {\n        if ( name in dom ) {\n            dom[ name ] = value || '';\n        }\n        if ( value ) {\n            dom.setAttribute( name, value );\n        } else {\n            dom.removeAttribute( name );\n        }\n    }\n}\n\n\n`}</code></pre>\n    <h2>{`相关链接`}</h2>\n    <ul>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"https://github.com/lengyuexin/simple-react\"\n        }}>{`https://github.com/lengyuexin/simple-react`}</a></li>\n    </ul>\n    <h2>{`再会`}</h2>\n    <p>{`情如风雪无常,`}</p>\n    <p>{`却是一动既殇。`}</p>\n    <p>{`感谢你这么好看还来阅读我的文章,`}</p>\n    <p>{`我是冷月心,下期再见。`}</p>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}