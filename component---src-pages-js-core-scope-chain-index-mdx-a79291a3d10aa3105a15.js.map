{"version":3,"sources":["webpack:///./src/pages/js-core/scope-chain/index.mdx"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","style","background","parentName","isMDXComponent"],"mappings":"4RAOO,IAAMA,EAAe,GAOtBC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,E,oIACF,mBACD,OAAO,YAACJ,EAAD,iBAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAI5E,YAAC,IAAD,CAAGA,QAAQ,KACT,gDAA+B,uBAA/B,sCAC6B,uBAD7B,qCAE4B,uBAF5B,0CAGiC,uBAHjC,yBAIgB,uBAJhB,uCAOF,YAAC,IAAD,CAAGC,MAAO,CACRC,WAAY,aACXF,QAAQ,KACT,uBAAK,kCAAMG,WAAW,OAAU,CAC5B,UAAa,gBADZ,gpBAkDXN,EAAWO,gBAAiB","file":"component---src-pages-js-core-scope-chain-index-mdx-a79291a3d10aa3105a15.js","sourcesContent":["import React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/Users/bytedance/Desktop/gatsby/src/components/BlogLayout/index.js\";\nimport P from '../../../components/Panel.js';\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n\n    <P mdxType=\"P\">\n      <p>{`函数执行时会形成一个私有作用域,也叫函数作用域。`}<br />{`\n私有作用域内的形参或声明的变量称为私有变量,其变化与全局变量无关。`}<br />{`\n如果当前作用域不存在该变量,说明是非私有变量,去上层作用域查找。`}<br />{`\n如果上层作用域找不到该变量,查找上上层作用域,一直到顶层,还找不到就报错。`}<br />{`\n这个查找过程类似一条链条,称为作用域链。`}<br />{`\n定义当前函数的作用域就是该函数的上级作用域,与函数何处执行无关。`}</p>\n    </P>\n    <P style={{\n      background: 'lightblue'\n    }} mdxType=\"P\">\n      <pre><code parentName=\"pre\" {...{\n          \"className\": \"language-js\"\n        }}>{`var a=10;\nfunction fn1(){\n    return function fn2(){\n        return function fn3(){\n            //这里的a会一直查找到挂载到window上的全局变量a\n            //fn3=>fn2=>fn1=>window\n           return a\n        }\n    }\n}\nfn1()()()\n\n\nvar count=10;\nfunction fn(){\n    var count=100;\n    return function(){\n        console.log(count)\n    }\n}\nvar f=fn();\nf();//定义f的作用域实际是fn函数,其上级作用域就是fn,此时count=100\n\n\n\n\nfunction fn(){\n    var i=10;\n    return function (n){\n        console.log(n+(++i))\n    }\n}\n\nvar f=fn();\nf(10)//21 私有作用域,计算后i值累加, i=11\nf(20) //32 私有作用域 ,此时i=11\nfn()(10) //21 独立私有作用域,执行完当前作用域销毁\nfn()(20) // 31 独立私有作用域,执行完当前作用域销毁\n\n\n\n\n`}</code></pre>\n    </P>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}