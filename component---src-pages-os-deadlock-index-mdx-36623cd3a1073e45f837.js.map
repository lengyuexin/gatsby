{"version":3,"sources":["webpack:///./src/pages/os/deadlock/index.mdx","webpack:///./node_modules/_@babel_runtime@7.12.5@@babel/runtime/helpers/esm/objectWithoutPropertiesLoose.js"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","style","background","isMDXComponent","_objectWithoutPropertiesLoose","source","excluded","key","i","target","sourceKeys","Object","keys","length","indexOf"],"mappings":"wPASaA,EAAe,GACtBC,EAAc,CAClBD,gBAEIE,EAAYC,UACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,EACF,8BACD,OAAO,YAACJ,EAAD,iBAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAI5E,4BACA,YAAC,IAAD,CAAGA,QAAQ,KAAX,8GAKA,8BACA,YAAC,IAAD,CAAGC,MAAO,CACRC,WAAY,WACXF,QAAQ,KAFX,uCAGgC,uBAHhC,4EAKoC,uBALpC,4CAMqC,uBANrC,8CAOuC,wBAEvC,4BACA,YAAC,IAAD,CAAGC,MAAO,CACRC,WAAY,aACXF,QAAQ,KAFX,qCASJH,EAAWM,gBAAiB,G,kCChDb,SAASC,EAA8BC,EAAQC,GAC5D,GAAc,MAAVD,EAAgB,MAAO,GAC3B,IAEIE,EAAKC,EAFLC,EAAS,GACTC,EAAaC,OAAOC,KAAKP,GAG7B,IAAKG,EAAI,EAAGA,EAAIE,EAAWG,OAAQL,IACjCD,EAAMG,EAAWF,GACbF,EAASQ,QAAQP,IAAQ,IAC7BE,EAAOF,GAAOF,EAAOE,IAGvB,OAAOE,EAZT","file":"component---src-pages-os-deadlock-index-mdx-36623cd3a1073e45f837.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nimport DefaultLayout from \"C:/Users/lengy/Desktop/gatsby-blog/src/components/BlogLayout/index.js\";\nimport P from '../../../components/Panel.js';\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n\n    <h3>{`解释`}</h3>\n    <P mdxType=\"P\">\n死锁是指两个或两个以上的进程在执行过程中,由于竞争资源或者由于彼此通信而造成的一种阻塞的现象。\n若无外力作用,它们都将无法推进下去。\n此时称系统处于死锁状态或系统产生了死锁,这些永远在互相等待的进程称为死锁进程。\n    </P>\n    <h3>{`产生条件`}</h3>\n    <P style={{\n      background: '#4AC29A'\n    }} mdxType=\"P\">\n互斥：在一段时间内某资源只由一个进程占用,必须释放后其他的进程才能使用。<br />\n请求和保持：指进程已经保持至少一个资源,但又提出了新的资源请求,\n而该资源已被其它进程占有,此时请求进程阻塞,但又对自己已获得的其它资源保持不放。<br />\n不剥夺：指进程已获得的资源,在未使用完之前,不能被剥夺,只能在使用完时由自己释放。<br />\n环路等待：指在发生死锁时,必然存在一个进程——资源的环形链p0=>p1=>p2=>p0<br />\n    </P>\n    <h3>{`预防`}</h3>\n    <P style={{\n      background: 'lightblue'\n    }} mdxType=\"P\">\n破坏产生死锁原因中的任意某个条件,如:有序资源分配法,银行家算法\n    </P>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      ","export default function _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}"],"sourceRoot":""}