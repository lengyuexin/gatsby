{"version":3,"sources":["webpack:///./src/pages/js-core/memory/index.mdx"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","style","background","parentName","isMDXComponent"],"mappings":"8RAOO,IAAMA,EAAe,GAOtBC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,E,oIACF,mBACD,OAAO,YAACJ,EAAD,iBAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAI5E,YAAC,IAAD,CAAGC,MAAO,CACRC,WAAY,WACXF,QAAQ,KACT,yCAAwB,uBAAxB,yCACgC,uBADhC,wCAE+B,yBAEjC,8BACA,YAAC,IAAD,CAAGC,MAAO,CACRC,WAAY,WACXF,QAAQ,KACT,uBAAK,kCAAMG,WAAW,OAAU,CAC5B,UAAa,gBADZ,sOAYP,+BACA,YAAC,IAAD,CAAGH,QAAQ,KAAX,6FAMA,YAAC,IAAD,CAAGC,MAAO,CACRC,WAAY,WACXF,QAAQ,KACT,uBAAK,kCAAMG,WAAW,OAAU,CAC5B,UAAa,gBADZ,mRAeP,+BACA,qBAAG,sBAAQA,WAAW,KAAnB,SACH,YAAC,IAAD,CAAGF,MAAO,CACRC,WAAY,WACXF,QAAQ,KACT,uBAAK,kCAAMG,WAAW,OAAU,CAC5B,UAAa,gBADZ,yHASP,qBAAG,sBAAQA,WAAW,KAAnB,cACH,YAAC,IAAD,CAAGF,MAAO,CACRC,WAAY,aACXF,QAAQ,KAFX,+IAQA,qBAAG,sBAAQG,WAAW,KAAnB,gBACH,YAAC,IAAD,CAAGF,MAAO,CACRC,WAAY,QACXF,QAAQ,KAFX,oMAUA,qBAAG,sBAAQG,WAAW,KAAnB,2BACH,YAAC,IAAD,CAAGH,QAAQ,KACT,kSAOF,qBAAG,sBAAQG,WAAW,KAAnB,eACH,YAAC,IAAD,CAAGF,MAAO,CACRC,WAAY,WACXF,QAAQ,KACT,wMAKF,8BACA,qBAAG,+BAAGG,WAAW,KAAQ,CACrB,KAAQ,+CADT,+CAGH,qBAAG,+BAAGA,WAAW,KAAQ,CACrB,KAAQ,+CADT,gDAOPN,EAAWO,gBAAiB","file":"component---src-pages-js-core-memory-index-mdx-cebcaf7049b2b423a6ec.js","sourcesContent":["import React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/Users/bytedance/Desktop/gatsby/src/components/BlogLayout/index.js\";\nimport P from '../../../components/Panel.js';\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n\n    <P style={{\n      background: '#4AC29A'\n    }} mdxType=\"P\">\n      <p>{`js中将内存划分为栈内存和堆内存。`}<br />{`\n栈内存除了存储基本类型和引用类型的堆内存地址外,还可以作为代码执行环境。`}<br />{`\n堆内存存储引用类型的值,如对象的属性名和属性值,函数体中的代码字符串。`}<br /></p>\n </P>\n    <h2>{`内存开辟`}</h2>\n    <P style={{\n      background: '#FDB99B'\n    }} mdxType=\"P\">\n      <pre><code parentName=\"pre\" {...{\n          \"className\": \"language-js\"\n        }}>{`//开辟栈内存,存储变量like,值为coding\nvar like=\"coding\";\n//开辟堆内存,存储对象的属性名 name 和属性值 冷月心\n//开辟栈内存,存储变量obj,值为其堆内存地址\nvar obj={name:\"冷月心\"}\n//开辟堆内存,存储函数体中的代码字符串 console.log(123)\n//开辟栈内存,存储变量fn,值为其堆内存地址\nfunction fn(){console.log(123)}\n`}</code></pre>\n    </P>\n    <h2>{`栈内存回收`}</h2>\n    <P mdxType=\"P\">\n全局作用域和私有作用域,都属于栈内存。\n全局作用域在页面关闭时销毁。\n函数执行产生私有作用域,一般而言,函数执行完对应的内存被销毁。\n如果外部有变量保持其引用,则不销毁(闭包)。\n    </P>\n    <P style={{\n      background: '#FDB99B'\n    }} mdxType=\"P\">\n      <pre><code parentName=\"pre\" {...{\n          \"className\": \"language-js\"\n        }}>{`function log(){alert(1)}\nlog()//执行完正常销毁\nfunction f1(){return function(){}}\n//f1 执行返回一个引用类型值,该值被外部变量f2接收,f1不销毁\nvar f2=f1();\n//dom注册事件监听\n//该函数被dom对象上的属性onclick接收,保持其引用,不销毁\ndom.onclick=function(){}\n//F形成的作用域不会立即销毁,执行后销毁\nfunction F(){ return function(){}}\nF()()\n`}</code></pre>\n    </P>\n    <h2>{`堆内存回收`}</h2>\n    <p><strong parentName=\"p\">{`代码示例`}</strong></p>\n    <P style={{\n      background: '#FDB99B'\n    }} mdxType=\"P\">\n      <pre><code parentName=\"pre\" {...{\n          \"className\": \"language-js\"\n        }}>{`var obj={name:\"冷月心\"}\n//外部有变量保持着对该堆内存的引用,这部分内存不会销毁\n//手动去掉或更改引用,使得该堆内存无外部引用,js引擎会在空闲的时候将这部分内存回收\nobj=null\nobj=1;\n`}</code></pre>\n    </P>\n    <p><strong parentName=\"p\">{`v8堆内存空间分类`}</strong></p>\n    <P style={{\n      background: 'lightblue'\n    }} mdxType=\"P\">\n以chrome浏览器中使用的js引擎v8为例,v8将堆内存分成新生代内存和老生代内存。\n新生代内存存放生存时间短的对象, 老生代内存中存放生存时间长的对象。\n它们最终都会交给js的垃圾回收器处理,其中主垃圾回收器主要负责老生代的垃圾回收,\n副垃圾回收器主要负责新生代的垃圾回收。\n    </P>\n    <p><strong parentName=\"p\">{`v8堆内存垃圾回收机制`}</strong></p>\n    <P style={{\n      background: 'pink'\n    }} mdxType=\"P\">\n不论什么类型的垃圾回收器，它们都有一套共同的执行流程。\n首先标记空间中活动对象和非活动对象(可回收的对象)。\n然后对被标记为非活动对象所占据的内存进行回收(其实就是标记清除法)。\n一般而言，频繁回收对象后，内存中就会存在大量不连续空间，这些不连续的内存空间被称为内存碎片。\n如果不做整理，即使剩余的非连续空间满足分配要求，也无法分配一个大的连续的内存空间。\n所以最后需要进行内存整理。\n    </P>\n    <p><strong parentName=\"p\">{`v8新生代Scavenge算法和对象晋升策略`}</strong></p>\n    <P mdxType=\"P\">\n      <p>{`新生代中用Scavenge算法来处理。把新生代空间一分为二，一半是对象区域，一半是空闲区域。\n在进行垃圾回收时，除了标记清除外，副垃圾回收器还会完成存活对象到空闲区域的复制转移和对象的有序排列。\n这个有序排列过程就相当于完成了内存整理，不会出现内存碎片的情况。\n最后，将对象区域与空闲区域进行翻转，循环利用，这样就完成了垃圾对象的回收操作。\n为了保证复制转移效率，新生代内存往往会设置的很小，这也意味着新生代内存空间容易被填满。\n如此，出现了对象晋升策略这一概念，经过两次垃圾回收依然还存活的对象，会被移动到老生区中。`}</p>\n    </P>\n    <p><strong parentName=\"p\">{`全停顿和增量标记算法`}</strong></p>\n    <P style={{\n      background: '#6dd5ed'\n    }} mdxType=\"P\">\n      <p>{`实际上，js引擎的垃圾回收是和主线程执行的脚本相冲突的，不能同时进行。\n一旦执行垃圾回收算法，正在执行的js脚本必须暂停，待垃圾回收完毕后再恢复执行，\n这种行为叫做全停顿。由此，增量标记算法横空而出，它可以把一个完整的垃圾回收任务拆分为很多小的任务，\n可理解为时间分片。执行时间比较短的小任务可与js逻辑交替进行，这样就不会有明显的卡顿感知。`}</p>\n    </P>\n    <h2>{`推荐阅读`}</h2>\n    <p><a parentName=\"p\" {...{\n        \"href\": \"https://time.geekbang.org/column/intro/216\"\n      }}>{`https://time.geekbang.org/column/intro/216`}</a></p>\n    <p><a parentName=\"p\" {...{\n        \"href\": \"https://juejin.cn/post/6844903993420840967\"\n      }}>{`https://juejin.cn/post/6844903993420840967`}</a></p>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}