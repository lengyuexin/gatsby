(window.webpackJsonp=window.webpackJsonp||[]).push([[57],{oTU8:function(e,n,t){"use strict";t.r(n),t.d(n,"_frontmatter",(function(){return c})),t.d(n,"default",(function(){return r}));t("rGqo"),t("yt8O"),t("Btvt"),t("RW0V"),t("91GP"),t("q1tI");var b=t("7ljp"),a=t("Hv6d");var c={},l={_frontmatter:c},s=a.a;function r(e){var n=e.components,t=function(e,n){if(null==e)return{};var t,b,a={},c=Object.keys(e);for(b=0;b<c.length;b++)t=c[b],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,["components"]);return Object(b.b)(s,Object.assign({},l,t,{components:n,mdxType:"MDXLayout"}),Object(b.b)("h2",null,"前言"),Object(b.b)("p",null,"关于技术与业务的平衡，我一直坚持的观点就是",Object(b.b)("strong",{parentName:"p"},"技术服务于业务，业务驱动技术提升"),"。"),Object(b.b)("p",null,"当然，这是理想状态。有的业务确实不需要多高深的技术，也没什么难度和挑战，按部就班即可。"),Object(b.b)("p",null,"直接表现就是面试问到你项目有什么难点和亮点，深思熟虑后你发现确实没什么可说的。"),Object(b.b)("p",null,"这个时候，有心和无意的区别就很大了。在一个项目中能收获什么，主要还是看自己怎么去发掘。"),Object(b.b)("p",null,"有场景就充分发挥，没场景就创造优化场景，合理即可。"),Object(b.b)("p",null,"今天我们就来聊一下，如何在一个项目中学习？"),Object(b.b)("h2",null,"编程思维"),Object(b.b)("p",null,"接到需求，大概想一下就开始编码的程序员并不在少数。这是缺点吗？确切地说，因人而异。"),Object(b.b)("p",null,"对于大佬而言，写的过程就能考虑各种优化和边界处理。直接一步到位，写文档反而显得有些鸡肋。"),Object(b.b)("p",null,"对于初级程序员来说，很难在写代码的过程中把各种情况和边界考虑全面。甚至有可能",Object(b.b)("strong",{parentName:"p"},"写到一半发现之前的思路完全是错的，需要推翻重写"),"。"),Object(b.b)("p",null,"这种返工耗时在项目开发时间不是那么充裕的情况下，是很容易delay的。"),Object(b.b)("p",null,"所以，建议尚未养成这种全面思考能力的小伙伴们选择文档先行。更专业一点，这种文档被称为",Object(b.b)("strong",{parentName:"p"},"技术设计文档"),"，是需要进行评审的。"),Object(b.b)("p",null,"磨刀不误砍柴工，设计文档越是详细，开发起来越快，甚至可以直接cv大法。文档编写的时候需要体现出大概实现思路，可以细致到组件，方法，变量的命名上。如果涉及数据库，那也要把每一张表的各个字段，类型，注释什么的写好。"),Object(b.b)("p",null,"具体应该如何设计呢？这里我贴两个实习期项目实战的链接，可以当个参考。"),Object(b.b)("ul",null,Object(b.b)("li",{parentName:"ul"},Object(b.b)("p",{parentName:"li"},Object(b.b)("a",Object.assign({parentName:"p"},{href:"https://mp.weixin.qq.com/s?__biz=MjM5NTQ3ODg3MQ==&mid=2247483864&idx=1&sn=af9adf81cf1e1a932e69960cb7621b7d&chksm=a6f6ade0918124f6d79914116b863deba2103142602738e80a5d2cad7972016dd6c0c1d85c5e&=1489737830&=zh_CN#rd"}),"设计的魅力（一）：导师问：你了解状态树的设计吗？我：什么是状态树？"))),Object(b.b)("li",{parentName:"ul"},Object(b.b)("p",{parentName:"li"},Object(b.b)("a",Object.assign({parentName:"p"},{href:"https://mp.weixin.qq.com/s?__biz=MjM5NTQ3ODg3MQ==&mid=2247483876&idx=1&sn=a5e3758eb9a2df8671511b4ac99bcd0c&chksm=a6f6addc918124ca30954adc681544ef50f4d6a23fd42743eaad08dfa825868b50055626d3cb&=1489737830&=zh_CN#rd"}),"设计的魅力(二): 导师问：新风格级联菜单调整需求想做吗？我：我能做吗？")))),Object(b.b)("h2",null,"react上手"),Object(b.b)("p",null,"我个人是走的react技术栈。vue和angular虽然以前也学过，但基本上忘得差不多了。\n这部分给出三个链接，都是偏向基础的学习笔记，感兴趣的可以当个参考。"),Object(b.b)("ul",null,Object(b.b)("li",{parentName:"ul"},Object(b.b)("p",{parentName:"li"},Object(b.b)("a",Object.assign({parentName:"p"},{href:"http://r6a.cn/bsdve"}),"react"))),Object(b.b)("li",{parentName:"ul"},Object(b.b)("p",{parentName:"li"},Object(b.b)("a",Object.assign({parentName:"p"},{href:"http://r6a.cn/bsdvg"}),"vue"))),Object(b.b)("li",{parentName:"ul"},Object(b.b)("p",{parentName:"li"},Object(b.b)("a",Object.assign({parentName:"p"},{href:"http://r6a.cn/bsdvy"}),"angular")))),Object(b.b)("p",null,"在我看来，上手一门新技术，最快的方式就是",Object(b.b)("strong",{parentName:"p"},"跟着官方示例撸一遍文档"),"。"),Object(b.b)("p",null,"只要官方文档写的不是很离谱，大部分示例都是比较经典且友好的。"),Object(b.b)("p",null,"以react为例，明确划分了核心概念和高级指引。看完核心概念，能大概理解组件，属性传递，生命周期，事件处理后，就可以试着写一个todoList。写完没什么问题就可以上手业务开发,这个过程快的话一两个小时即可。如果js还不熟悉，可以去补一下红宝书和犀牛书，都有了新版。"),Object(b.b)("p",null,"贴一个以前的笔记链接，仅供参考："),Object(b.b)("p",null,Object(b.b)("strong",{parentName:"p"},Object(b.b)("a",Object.assign({parentName:"strong"},{href:"http://r6a.cn/bsd1e"}),"redux+antd实现todoList"))),Object(b.b)("h2",null,"通用业务逻辑与解决方案"),Object(b.b)("p",null,"对于固定的业务场景，自然也有通用的业务逻辑和解决方案。\n这部分实际上会有很多，这里我只说几个我所经历的。"),Object(b.b)("h3",null,"jwt登录认证"),Object(b.b)("p",null,"这部分给出三个链接，分别是对jwt的解释和在java,node场景下的应用。"),Object(b.b)("ul",null,Object(b.b)("li",{parentName:"ul"},Object(b.b)("strong",{parentName:"li"},Object(b.b)("a",Object.assign({parentName:"strong"},{href:"http://r6a.cn/bse8x"}),"JSON WEB TOKEN"))," "),Object(b.b)("li",{parentName:"ul"},Object(b.b)("strong",{parentName:"li"},Object(b.b)("a",Object.assign({parentName:"strong"},{href:"http://r6a.cn/bse8n"}),"springboot--jwt授权"))," "),Object(b.b)("li",{parentName:"ul"},Object(b.b)("strong",{parentName:"li"},Object(b.b)("a",Object.assign({parentName:"strong"},{href:"http://r6a.cn/bse8q"}),"koa--jwt-cookie 授权"))," :")),Object(b.b)("h3",null,"注册"),Object(b.b)("p",null,"注册时候需要收集每一个表单项数据并且校验合法性。这里可以用一个数组对象存储，类似下面这种结构。"),Object(b.b)("pre",null,Object(b.b)("code",Object.assign({parentName:"pre"},{className:"language-js"}),"\nconst form=[\n    {\n        formItem:'username',\n        pass:true\n    },\n    {\n        formItem:'password',\n        pass:true\n    },\n    {\n        formItem:'phone',\n        pass:true\n    },\n]\n\n\n")),Object(b.b)("p",null,"如何使用呢？存在即合理，数组的every方法极为合适，该方法的返回结果用于设置是否可点击注册按钮。"),Object(b.b)("pre",null,Object(b.b)("code",Object.assign({parentName:"pre"},{className:"language-js"}),"\nconst flag = form.every(item=>item.pass) \n\n")),Object(b.b)("h3",null,"避免重复注册"),Object(b.b)("p",null,"点击注册按钮后，在请求尚未响应回来的空档期，快速点击，就会发送多个注册请求，导致数据库出现冗余数据。"),Object(b.b)("p",null,"解决也很简单，点击后立刻禁用。如注册成功，则跳转至登录页；如注册失败，则停留在当前页，恢复点击。"),Object(b.b)("h3",null,"加密存储"),Object(b.b)("p",null,"对于关键的用户信息(如密码)需要加密存储，不能保存明文。"),Object(b.b)("p",null,"登录或者修改密码输入原密码时也是将加密结果与数据库存储的加密结果比对，不可涉及明文。"),Object(b.b)("h3",null,"图片优化"),Object(b.b)("p",null,"对于那种涉及很多图片展示的场景，如花瓣网，大屏数据展示，如果不做任何处理，流畅度会大大降低。\n通用的手段是图片压缩和更换图片格式，两者达到一个平衡需要清晰度和尺寸都能兼顾，这就是webp的落地场景。"),Object(b.b)("p",null,"当然，这个有兼容性问题，需要考虑降级。详情可参考："),Object(b.b)("p",null,Object(b.b)("a",Object.assign({parentName:"p"},{href:"https://mp.weixin.qq.com/s?__biz=MjM5NTQ3ODg3MQ==&mid=2247483820&idx=1&sn=ca2060d5fdc537bc81f34015de735864&chksm=a6f6ad9491812482d665f432a4b7fcc9b2cf6c33fa6babb9fec46890b1b7fbf48338e2e6fee8&=1489737830&=zh_CN#rd"}),"一场关于webp的革命，让你的网站更丝滑")),Object(b.b)("h2",null,"非预期问题排查与经验积累"),Object(b.b)("p",null,"项目中是有可能会遇到很多踩坑点的，当然这个取决于你个人能力，当时写代码的思维清晰程度，以及一些外在因素。"),Object(b.b)("p",null,"下面分享几个我踩过的坑以及排查方法。"),Object(b.b)("h3",null,"组件非预期更新"),Object(b.b)("p",null,"简单来说，就是你希望某个组件更新，但是它依然保留了上次的状态。\n什么情况下会造成这种情况呢？我举一个例子。"),Object(b.b)("pre",null,Object(b.b)("code",Object.assign({parentName:"pre"},{className:"language-js"}),"\nimport React, { useState } from 'react';\n\nimport { Table,  Space, Drawer } from 'antd';\nimport \"antd/dist/antd.css\";\nconst columns = (setVisible, setRecord) => [\n  {\n    title: 'Name',\n    dataIndex: 'name',\n    key: 'name',\n\n  },\n  {\n    title: 'Age',\n    dataIndex: 'age',\n    key: 'age',\n  },\n\n  {\n    title: 'Action',\n    key: 'action',\n    render: (text, record) => (\n      <Space size=\"middle\">\n        <span onClick={() => {\n          setVisible(true)\n          setRecord(record)\n        }}>查看</span>\n      </Space>\n    ),\n  },\n];\n\nconst data = [\n  {\n    key: '1',\n    name: 'John Brown',\n    age: 32,\n\n  },\n  {\n    key: '2',\n    name: 'Jim Green',\n    age: 42,\n\n  },\n  {\n    key: '3',\n    name: 'Joe Black',\n    age: 32,\n\n  },\n];\n\n\n\nfunction App() {\n\n  const [visible, setVisible] = useState(false);\n  const [record, setRecord] = useState({});\n  return (\n    <div>\n\n      <Table columns={columns(setVisible, setRecord)} dataSource={data} />\n      <Drawer\n        title=\"Basic Drawer\"\n        placement=\"right\"\n        closable={false}\n        onClose={() => {\n          setVisible(false)\n        }}\n        visible={visible}\n      >\n        <p>{record.name}</p>\n        <Show age={record.age}/>\n      </Drawer>\n    </div>\n  );\n}\n\nexport default App;\n\n\n\nclass Show extends React.Component {\n\n  constructor(props) {\n    super(props)\n    this.state = {\n      count: 0\n    }\n  }\n  componentDidMount() {\n    this.getCount();\n  }\n\n  getCount = () => {\n    setTimeout(() => {\n      this.setState({\n        count: this.props.age+1\n      })\n    }, 1000)\n  }\n  render() {\n    return <div>{this.state.count}</div>\n  }\n}\n\n\n\n")),Object(b.b)("p",null,"代码逻辑大概就是对于每一条数据，点击查看的时候，可以看到名称和一个依赖年龄参数算出来的一个数。\n我们假定这个数必须通过一个接口计算得到，上述用setTimeout模拟了一下。"),Object(b.b)("p",null,"问题关键点在于，",Object(b.b)("strong",{parentName:"p"},"这个请求是只有Show组件挂载才会触发，之后不会再更新。"),"\n这意味着，",Object(b.b)("strong",{parentName:"p"},"第一次点击查看会发生数值改变，以后怎么打开都是之前的那个值。")),Object(b.b)("p",null,"解决也很容易，既然每次Drawer组件打开关闭都有状态变更，那Show组件也更新即可。"),Object(b.b)("pre",null,Object(b.b)("code",Object.assign({parentName:"pre"},{className:"language-js"}),"\n{visible&&<Show age={record.age}/>}\n\n")),Object(b.b)("p",null,"类似这种非预期更新的还有很多，比如value和onChange的变量名没对上，使用mobx但是没对目标组件进行观测..."),Object(b.b)("p",null,"解决这类问题的核心就是",Object(b.b)("strong",{parentName:"p"},"找到恰当的更新时机，更新一次，必要时用key强制更新。")),Object(b.b)("h3",null,"文件写入不全"),Object(b.b)("p",null,"在实习期做的项目中有一个功能是在线实时保存，数据会以物理文件形式写入到磁盘，用户反馈页面展示效果不全才暴露出这个问题。"),Object(b.b)("p",null,"我当时的想法是网络波动导致只写入了一部分，后来发现并非如此，在那个时间段网络没毛病。"),Object(b.b)("p",null,"紧接着我想会不会是文件太大没有写完？看了一下其他写入的文件大小，最大也不超过10M。"),Object(b.b)("p",null,"这个量级node一会就写完了，显然也不是这个问题。"),Object(b.b)("p",null,"到最后，忘了怎么发现的了，是",Object(b.b)("strong",{parentName:"p"},"磁盘空间不够了...")),Object(b.b)("p",null,"好吧，默默记住这种可能的坑。"),Object(b.b)("h3",null,"axios会删除get请求头中的Content-Type"),Object(b.b)("p",null,"为什么删除？说实话，我并不确定。大胆的猜一下，axios认为get请求是简单请求，不需要设置这东西?"),Object(b.b)("p",null,"这东西会影响什么？影响我对cors的理解了。"),Object(b.b)("p",null,"在某个项目中，同事鲸鱼问我一个跨域问题的配置，然后发现同样的配置get请求可以但post请求不行。\n当时怀疑是传了cors以外的自定义头，变成了非简单请求，比如Content-Type:application/json;"),Object(b.b)("p",null,"看代码发现确实没有添加什么头的配置，很迷。找了一圈发现是全局配置了头，woc...然后困惑我的地方就出现了，既然设置了这个头，get和post都必然是非简单请求，为什么一个能过一个不能过？"),Object(b.b)("p",null,"我灵光一闪，难道是axios请求本身的问题？之前撸过源码，知道浏览器端axios其实就是用的xhr。"),Object(b.b)("p",null,"于是我打开Chrome控制台，写下如下代码，回车,查看请求头是否携带了content-type。"),Object(b.b)("pre",null,Object(b.b)("code",Object.assign({parentName:"pre"},{className:"language-js"}),"\nvar xhr=new XMLHttpRequest()\nxhr.open('get','/')\nxhr.setRequestHeader('content-type','application/json')\nxhr.send(null)\n\n")),Object(b.b)("p",null,"果然，带上了...此时可以判定必然是axios做了手脚。"),Object(b.b)("p",null,"再去看axios源码，发现确实对content-type做了remove操作。"),Object(b.b)("p",null,"上边提到了cors，这里补一下：",Object(b.b)("a",Object.assign({parentName:"p"},{href:"https://lengyuexin.github.io/gatsby/cors"}),"https://lengyuexin.github.io/gatsby/cors")),Object(b.b)("h3",null,"数据类型一致很重要"),Object(b.b)("p",null,"近期在做某个需求的时候不小心踩了一个坑，js数据类型为字符串，但是数据库该字段设置成了int。\n这就导致小数位会被截断，怎么算都有偏差。"),Object(b.b)("p",null,"定位也经过了层层曲折，后来发现计算结果有小数但是存储都是整数，才意识到是类型问题。"),Object(b.b)("p",null,"涉及数据计算，类型一定要多加注意。"),Object(b.b)("h2",null,"代码段优化"),Object(b.b)("p",null,"实现一种功能通常会有不止一种方法，能优化的最好优化一下。\n下面介绍几个我接触前端到现在常用的代码段优化手段，可当个参考。"),Object(b.b)("h3",null,"如果某个配置想要获取外部参数，用函数"),Object(b.b)("p",null,"例如："),Object(b.b)("pre",null,Object(b.b)("code",Object.assign({parentName:"pre"},{className:"language-js"}),"const columns = (setVisible, setRecord) => [\n  {\n    title: 'Name',\n    dataIndex: 'name',\n    key: 'name',\n\n  },\n  {\n    title: 'Age',\n    dataIndex: 'age',\n    key: 'age',\n  },\n\n  {\n    title: 'Action',\n    key: 'action',\n    render: (text, record) => (\n      <Space size=\"middle\">\n        <span onClick={() => {\n          setVisible(true)\n          setRecord(record)\n        }}>查看</span>\n      </Space>\n    ),\n  },\n];\n\n\n\n\n")),Object(b.b)("h3",null,"大多数情况下更新和添加逻辑可复用"),Object(b.b)("ul",null,Object(b.b)("li",{parentName:"ul"},"前端处理可共用组件，编辑时候注意数据回显即可"),Object(b.b)("li",{parentName:"ul"},"后端处理可共用接口")),Object(b.b)("pre",null,Object(b.b)("code",Object.assign({parentName:"pre"},{className:"language-js"}),"async function addOrUpdate(params) {\n\n    if (params.id) {\n        //更新\n    } else {\n      //添加\n    }\n}\n\n")),Object(b.b)("h3",null,"尽可能让常量有统一入口"),Object(b.b)("p",null,"集中管理可以让代码结构更清晰，也方便常量的管理和查找。"),Object(b.b)("ul",null,Object(b.b)("li",{parentName:"ul"},"如果是全局共用常量，建议放在src/common/consts"),Object(b.b)("li",{parentName:"ul"},"如果是某个组件独有，建议放在src/components/xxx组件/consts")),Object(b.b)("h3",null,"请求retry"),Object(b.b)("p",null,"retry指的是自定义失败重试次数的请求，在网络条件不好或者服务端波动情况下很有用。"),Object(b.b)("pre",null,Object(b.b)("code",Object.assign({parentName:"pre"},{className:"language-js"}),"async function retry(options = {}, delay, count = 3) {\n\n  try {\n    return await axios(options)\n  } catch (error) {\n\n    if (--count === 0) {\n      return console.error(error.message)\n    } else {\n      setTimeout(() => {\n        return retry(options, count)\n      }, delay)\n    }\n  }\n}\n\n")),Object(b.b)("h3",null,"批量处理应该是单接口的批量而不是请求的批量"),Object(b.b)("p",null,"这句话听起来可能有些绕，我举个批量添加用户的例子。"),Object(b.b)("pre",null,Object(b.b)("code",Object.assign({parentName:"pre"},{className:"language-js"}),"\n//假定已经获取到了要添加的用户列表list\n\n// bad case 直接在前端循环发送请求\n// http1.x每个浏览器同域名有并发限制，如果用户特别多，后续请求只能排队\nlist.forEach(user=>{\n    //假定save为插入接口\n    save(user)\n})\n\n//good case 前端只进行一次调用，循环插入在接口中完成\n\n//client \nsave(list)\n\n// server\nasync function save(list){\n    list.forEach(user=>{\n    //假定insert为插入操作\n     insert(user)\n   })\n}\n\n\n\n")),Object(b.b)("h3",null,"充分利用异步能力，不需要await的就不要await"),Object(b.b)("p",null,"现行版本的js中确实每一个await都要包裹在async中,以后会去掉这个限制。"),Object(b.b)("p",null,"此外，并不是每一个async都必须await,如果没有依赖返回值的计算，天然的异步是非常快的。"),Object(b.b)("h3",null,"保证函数独立性，不要过度聚合"),Object(b.b)("p",null,"函数的核心是复用，太多业务杂糅在一起，会使得其可复用性下降。"),Object(b.b)("h3",null,"不要太硬编码，换成map"),Object(b.b)("p",null,"这样做的好处是，如果存在多处引用，只需要修改map就好，不用每个都改"),Object(b.b)("pre",null,Object(b.b)("code",Object.assign({parentName:"pre"},{className:"language-js"}),"\n// bad case \n\nif(flag === '成功'){\n    //do something\n}\n\n//good case \n\nconst map = {\n    success:'成功'\n}\n\nif(flag === map.success){\n    //do something\n}\n\n\n")),Object(b.b)("h2",null,"再会"),Object(b.b)("p",null,"事在人为，若有意改变，普通项目也会因你变得不那么普通。"),Object(b.b)("p",null,"关于如何在项目中学习，本期要聊的就是这些，希望对你有所帮助。"),Object(b.b)("p",null,"情如风雪无常,"),Object(b.b)("p",null,"却是一动既殇。"),Object(b.b)("p",null,"感谢你这么好看还来阅读我的文章,"),Object(b.b)("p",null,"我是冷月心,下期再见。"))}r.isMDXComponent=!0}}]);
//# sourceMappingURL=component---src-pages-study-from-project-index-mdx-fcc983b8b3fcfe7f6362.js.map