{"version":3,"sources":["webpack:///./src/pages/cors/index.mdx"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","style","background","isMDXComponent"],"mappings":"4RAOO,IAAMA,EAAe,GAOtBC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,E,oIACF,mBACD,OAAO,YAACJ,EAAD,iBAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAI5E,mCACA,YAAC,IAAD,CAAGA,QAAQ,KAAX,2KAMA,qBAAG,sBAAQC,WAAW,KAAnB,eACH,YAAC,IAAD,CAAGD,QAAQ,KAAX,kBACA,qBAAG,sBAAQC,WAAW,KAAnB,cACH,YAAC,IAAD,CAAGD,QAAQ,KAAX,gBACa,uBADb,0BAEuB,uBAFvB,2BAGwB,uBAHxB,uFAIoF,uBAJpF,kCAOA,qBAAG,sBAAQC,WAAW,KAAnB,kBACH,iCACA,qBAAG,sBAAQA,WAAW,KAAnB,uBACH,YAAC,IAAD,CAAGD,QAAQ,KACT,sGAAqF,uBAArF,2FACkF,uBADlF,sCAE6B,uBAF7B,4CAGmC,uBAHnC,2CAIkC,uBAJlC,8BAKqB,uBALrB,+CAQF,iCACA,YAAC,IAAD,CAAGE,MAAO,CACRC,WAAY,QACXH,QAAQ,KAFX,+BAGwB,uBAHxB,2EAIoE,uBAJpE,wEAOA,oCACA,YAAC,IAAD,CAAGE,MAAO,CACRC,WAAY,aACXH,QAAQ,KAFX,uCAGgC,uBAHhC,iEAI0D,uBAJ1D,2DAKoD,wBAEpD,qBAAG,sBAAQC,WAAW,KAAnB,wBACH,YAAC,IAAD,CAAGC,MAAO,CACRC,WAAY,aACXH,QAAQ,KAFX,uBAGgB,uBAHhB,oCAI6B,uBAJ7B,2BAOA,uBAAK,kCAAMC,WAAW,OAAU,CAC5B,UAAa,gBADZ,+QAeL,qBAAG,sBAAQA,WAAW,KAAnB,yBACH,YAAC,IAAD,CAAGC,MAAO,CACRC,WAAY,WACXH,QAAQ,KAFX,kDAKA,gCACA,uBAAK,kCAAMC,WAAW,OAAU,CAC5B,UAAa,gBADZ,kpBAyBTJ,EAAWO,gBAAiB","file":"component---src-pages-cors-index-mdx-863e9fb7c1f143b355ef.js","sourcesContent":["import React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/Users/bytedance/Desktop/gatsby/src/components/BlogLayout/index.js\";\nimport P from '../../components/Panel.js';\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n\n    <h3>{`简单请求和复杂请求`}</h3>\n    <P mdxType=\"P\"> \ncors分为简单请求和复杂请求，对于简单请求的限制较少，对于复杂请求的限制较多。\n对于简单请求，基本上设置一个响应头Access-Control-Allow-Origin足矣，不会发探测请求(options)。\n而对于复杂请求，往往需要一些额外的响应头的处理，会发探测请求。\n那简单请求和复杂请求是如何划分的呢？先看下什么是简单请求:\n    </P>\n    <p><strong parentName=\"p\">{`请求方法为以下3种:`}</strong></p>\n    <P mdxType=\"P\">HEAD、GET、POST </P>\n    <p><strong parentName=\"p\">{`请求头为以下3种:`}</strong></p>\n    <P mdxType=\"P\"> \n    Accept 期望返回格式<br />\n    Accept-Language 期望返回的语言<br />\n    Content-Type 决定文件接收方如何解析<br />\n    其中Content-Type只能是:text/plain、multipart/form-data 或 application/x-www-form-urlencoded<br />\n    这也就意味着:application/json 不是简单请求\n    </P>\n    <p><strong parentName=\"p\">{`除此之外的，都视为复杂请求`}</strong></p>\n    <h3>{`options`}</h3>\n    <p><strong parentName=\"p\">{`只有复杂请求会发送options请求`}</strong></p>\n    <P mdxType=\"P\">\n      <p>{`可使用Access-Control-Max-Age 设置options请求发送时间间隔 Access-Control-Max-Age: 600 (10分钟)`}<br />{`\nAccess-Control-Max-Age表示Access-Control-Allow-Origin和Access-Control-Allow-Headers的缓存时长)`}<br />{`\n在 Firefox 中，上限是24小时 （即 86400 秒）。)`}<br />{`\n在 Chromium v76 之前， 上限是 10 分钟（即 600 秒)。)`}<br />{`\n从 Chromium v76 开始，上限是 2 小时（即 7200 秒)。)`}<br />{`\nChromium 同时规定了一个默认值 5 秒。)`}<br />{`\n如果值为 -1，表示禁用缓存，则每次请求前都需要使用 OPTIONS 预检请求。`}</p>\n    </P>\n    <h3>{`复杂请求的限制`}</h3>\n    <P style={{\n      background: 'pink'\n    }} mdxType=\"P\">\n对于复杂请求限制主要体现在两个方面:方法限制和请求头限制<br />\n对于前者，后端可通过设置Access-Control-Allow-Methods，允许指定方法跨域，多个值则用逗号隔开 'PUT,DELETE'<br />\n对于后者，后端可通过设置Access-Control-Allow-Headers，允许指定头跨域，多个值则用逗号隔开 'xxx,yyy'\n    </P>\n    <h3>{`跨域携带cookie`}</h3>\n    <P style={{\n      background: 'lightblue'\n    }} mdxType=\"P\">\n默认情况下，不论是fetch还是axios,都不会跨域携带cookie。<br />\n如果允许携带cookie,那后端设置的Access-Control-Allow-Origin和其他头的值不能是*，要具体指定<br />\n如果允许携带cookie,需要后端设置Access-Control-Allow-Credentials为true<br />\n    </P>\n    <p><strong parentName=\"p\">{`fetch默认会忽略cookie的发送`}</strong></p>\n    <P style={{\n      background: 'lightblue'\n    }} mdxType=\"P\">\nomit:默认值，忽略cookie的发送<br />\nsame-origin:表示cookie只能同域发送，不能跨域发送<br />\ninclude:既可以同域发送，也可以跨域发送\n    </P>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`\n fetch('http://localhost:3000/api/',{\n            headers:{\n                token:'xxx'\n            },\n            credentials: 'include'\n        }).then(res => {\n            return res.json()\n        }).then(res => {\n            console.log(res)\n  })\n\n`}</code></pre>\n    <p><strong parentName=\"p\">{`axios默认不允许跨域携带cookie`}</strong></p>\n    <P style={{\n      background: '#4AC29A'\n    }} mdxType=\"P\">\n可通过设置:axios.defaults.withCredentials = true;改变\n    </P>\n    <h3>{`后端跨域设置`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`const app = new (require('koa'))\napp.use((ctx) => {\n   // ctx.set('Access-Control-Allow-Origin', '*')\n    ctx.set('Access-Control-Allow-Origin', ctx.headers.origin)\n    ctx.set('Access-Control-Allow-Credentials',true)\n    // ctx.set('Access-Control-Allow-Headers', '*')\n    ctx.set('Access-Control-Allow-Headers', 'token')\n    // ctx.set('Access-Control-Allow-Methods', 'PUT,DELETE')\n    ctx.set('Access-Control-Allow-Methods', '*')\n    ctx.set('Access-Control-Max-Age', 60)//1分钟内不再发options请求\n    ctx.set('Set-Cookie', 'token=xxxyyyzzz')\n    ctx.body = { name: \"tom\" }\n})\n\napp.listen(3000, () => {\n    console.log('run server')\n})\n\n`}</code></pre>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}