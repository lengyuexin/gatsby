{"version":3,"sources":["webpack:///./src/pages/browser/req-res/index.mdx"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"mappings":"+QAMO,IAAMA,EAAe,GAOtBC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,E,oIACF,mBACD,OAAO,YAACJ,EAAD,iBAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAG5E,sBACE,kBAAIC,WAAW,MAAf,+CACA,kBAAIA,WAAW,MAAf,4BAAiD,+BAAGA,WAAW,MAAS,CACpE,KAAQ,0BADqC,0BAGjD,kBAAIA,WAAW,MAAf,4BACA,kBAAIA,WAAW,MAAf,+CACA,kBAAIA,WAAW,MAAf,iCACA,kBAAIA,WAAW,MAAf,4BACA,kBAAIA,WAAW,MAAf,6BACA,kBAAIA,WAAW,MAAf,8EACA,kBAAIA,WAAW,MAAf,6CACA,kBAAIA,WAAW,MAAf,8BACA,kBAAIA,WAAW,MAAf,wBACA,kBAAIA,WAAW,MAAf,0BACA,kBAAIA,WAAW,MAAf,gBACA,kBAAIA,WAAW,MAAf,uDACA,kBAAIA,WAAW,MAAf,kBACA,kBAAIA,WAAW,MAAf,qBACA,kBAAIA,WAAW,MAAf,MACA,kBAAIA,WAAW,MAAf,SACA,kBAAIA,WAAW,MAAf,cACA,kBAAIA,WAAW,MAAf,eAMNJ,EAAWK,gBAAiB","file":"component---src-pages-browser-req-res-index-mdx-16a927c7927636c81e6a.js","sourcesContent":["import React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/Users/bytedance/Desktop/gatsby/src/components/BlogLayout/index.js\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <ol>\n      <li parentName=\"ol\">{`协议补全，通常我们在地址栏输入的URL都不会手动补全协议名，而是交给地址栏自动完成。 `}</li>\n      <li parentName=\"ol\">{`如输入www.baidu.com,最终请求URL为`}<a parentName=\"li\" {...{\n          \"href\": \"https://www.baidu.com\"\n        }}>{`https://www.baidu.com`}</a></li>\n      <li parentName=\"ol\">{`网络进程：缓存存在直接返回，否则发送请求到服务端`}</li>\n      <li parentName=\"ol\">{`发请求需要知道目标主机和端口号，http默认端口号:80,https默认端口号:443`}</li>\n      <li parentName=\"ol\">{`主机和端口号从url获取，url可能是纯ip，也可能是域名`}</li>\n      <li parentName=\"ol\">{`如果是域名，就进行dns域名解析，涉及dns缓存`}</li>\n      <li parentName=\"ol\">{`tcp三次握手(https协议会有tls建立连接)`}</li>\n      <li parentName=\"ol\">{`解析url获取的ip端口号，浏览器端会构建请求行、请求头等信息，并把和该域名相关的Cookie等数据附加到请求头中，然后向服务器发送构建的请求信息。`}</li>\n      <li parentName=\"ol\">{`报文解析http->tcp->ip...    ... ip->tcp->http`}</li>\n      <li parentName=\"ol\">{`服务器处理，构建响应报文 (响应行、响应头和响应体)`}</li>\n      <li parentName=\"ol\">{`响应头包含location需要重定向处理`}</li>\n      <li parentName=\"ol\">{`Content-Type告知浏览器如何解析 `}</li>\n      <li parentName=\"ol\">{`解析html构建dom树`}</li>\n      <li parentName=\"ol\">{`解析css为styleSheets，样式标准化：rgb,bold:700,根据继承和层叠计算dom样式`}</li>\n      <li parentName=\"ol\">{`创建布局树(只包含可见元素)`}</li>\n      <li parentName=\"ol\">{`z-index,定位，浮动，分层，`}</li>\n      <li parentName=\"ol\">{`绘制`}</li>\n      <li parentName=\"ol\">{`栅格化处理`}</li>\n      <li parentName=\"ol\">{`GUI进程合成和显示`}</li>\n      <li parentName=\"ol\">{`四次挥手，断开连接`}</li>\n    </ol>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}