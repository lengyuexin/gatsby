{"version":3,"sources":["webpack:///./src/pages/browser/chrome/index.mdx"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","style","background","parentName","isMDXComponent"],"mappings":"2RAOO,IAAMA,EAAe,GAOtBC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,E,oIACF,mBACD,OAAO,YAACJ,EAAD,iBAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAI5E,+BACA,YAAC,IAAD,CAAGA,QAAQ,KAAX,iCAC8B,uBAD9B,yCAEsC,uBAFtC,oBAKA,6BACA,YAAC,IAAD,CAAGC,MAAO,CACRC,WAAY,aACXF,QAAQ,KAFX,2CAGoC,uBAHpC,gCAIyB,uBAJzB,2BAOA,6BACA,YAAC,IAAD,CAAGC,MAAO,CACRC,WAAY,aACXF,QAAQ,KACT,mEAEF,6BACA,YAAC,IAAD,CAAGC,MAAO,CACRC,WAAY,aACXF,QAAQ,KACT,wIAIF,+BACA,8BACE,iBAAGG,WAAW,cAAd,0CAEF,iCACA,YAAC,IAAD,CAAGF,MAAO,CACRC,WAAY,WACXF,QAAQ,KAFX,mEAMA,iCACA,YAAC,IAAD,CAAGC,MAAO,CACRC,WAAY,WACXF,QAAQ,KAFX,2HAMA,iCACA,YAAC,IAAD,CAAGC,MAAO,CACRC,WAAY,WACXF,QAAQ,KAFX,6KAQA,8BACA,qBAAG,+BAAGG,WAAW,KAAQ,CACrB,KAAQ,+CADT,gDAOPN,EAAWO,gBAAiB","file":"component---src-pages-browser-chrome-index-mdx-a26c02db0746c2873734.js","sourcesContent":["import React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/Users/bytedance/Desktop/gatsby/src/components/BlogLayout/index.js\";\nimport P from '../../../components/Panel.js';\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n\n    <h2>{`单进程架构`}</h2>\n    <P mdxType=\"P\">\n    单进程浏览器是指浏览器的所有功能模块都是运行在同一个进程里。<br />\n    这些模块包含了网络、插件、JavaScript 运行环境、渲染引擎和页面等。<br />\n    实际上,单进程架构会有很多问题。\n    </P>\n    <h3>{`不稳定`}</h3>\n    <P style={{\n      background: 'lightblue'\n    }} mdxType=\"P\">\n早期浏览器需要借助于插件来实现诸如 Web 视频、Web 游戏等各种强大的功能。<br />\n但是插件是最容易出问题的模块,并且还运行在浏览器进程之中。<br />\n所以一个插件的意外崩溃会引起整个浏览器的崩溃。\n    </P>\n    <h3>{`不流畅`}</h3>\n    <P style={{\n      background: 'lightblue'\n    }} mdxType=\"P\">\n      <p>{`同一时刻只能有一个模块可以执行,错误代码导致的死循环,内存泄漏会让浏览器变得卡顿。`}</p>\n    </P>\n    <h3>{`不安全`}</h3>\n    <P style={{\n      background: 'lightblue'\n    }} mdxType=\"P\">\n      <p>{`插件可以使用 C/C++ 等代码编写,通过插件可以获取到操作系统的任意资源。\n当你在页面运行一个插件时也就意味着这个插件能完全操作你的电脑。\n如果是个恶意插件,那么它就可以释放病毒、窃取你的账号密码,引发安全性问题。`}</p>\n    </P>\n    <h2>{`多进程架构`}</h2>\n    <blockquote>\n      <p parentName=\"blockquote\">{`chrome通过一次单进程到多进程的架构升级,解决了单进程暴露出来的问题。`}</p>\n    </blockquote>\n    <h3>{`解决不稳定问题`}</h3>\n    <P style={{\n      background: '#4AC29A'\n    }} mdxType=\"P\">\n由于进程是相互隔离的,所以当一个页面或者插件崩溃时,\n影响到的仅仅是当前的页面进程或者插件进程,并不会影响到浏览器和其他页面。\n    </P>\n    <h3>{`解决不流畅问题`}</h3>\n    <P style={{\n      background: '#4AC29A'\n    }} mdxType=\"P\">\njs运行在渲染进程中,即使js阻塞了渲染进程,影响到的也只是当前的渲染页面,而并不会影响浏览器和其他页面,因为其他页面的脚本是运行在它们自己的渲染进程中的。\n当我们再在 Chrome 中运行某个死循环的脚本时,没有响应的仅仅是当前的页面。\n    </P>\n    <h3>{`解决不安全问题`}</h3>\n    <P style={{\n      background: '#4AC29A'\n    }} mdxType=\"P\">\n采用多进程架构的额外好处是可以使用安全沙箱,你可以把沙箱看成是操作系统给进程上了一把锁。\n沙箱里面的程序可以运行,但是不能在你的硬盘上写入任何数据,也不能在敏感位置读取任何数据,例如你的文档和桌面。\nChrome 把插件进程和渲染进程锁在沙箱里面,\n这样即使在渲染进程或者插件进程里面执行了恶意程序,恶意程序也无法突破沙箱去获取系统权限。\n    </P>\n    <h3>{`推荐阅读`}</h3>\n    <p><a parentName=\"p\" {...{\n        \"href\": \"https://time.geekbang.org/column/intro/216\"\n      }}>{`https://time.geekbang.org/column/intro/216`}</a></p>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}