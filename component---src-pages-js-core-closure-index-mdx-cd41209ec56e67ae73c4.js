(window.webpackJsonp=window.webpackJsonp||[]).push([[19],{pl36:function(e,n,t){"use strict";t.r(n),t.d(n,"_frontmatter",(function(){return u})),t.d(n,"default",(function(){return c}));t("rGqo"),t("yt8O"),t("Btvt"),t("RW0V"),t("91GP"),t("q1tI");var o=t("7ljp"),r=t("Hv6d"),l=t("JLKy");var u={},d={_frontmatter:u},s=r.a;function c(e){var n=e.components,t=function(e,n){if(null==e)return{};var t,o,r={},l=Object.keys(e);for(o=0;o<l.length;o++)t=l[o],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,["components"]);return Object(o.b)(s,Object.assign({},d,t,{components:n,mdxType:"MDXLayout"}),Object(o.b)("h3",null,"如何理解闭包"),Object(o.b)(l.a,{mdxType:"P"},"定义一个函数，函数内部的变量沿着作用域链查找，可以访问非当前作用域下的变量。 这种情况下就是形成了闭包，该函数内引用非当前作用域的变量称为闭包变量。",Object(o.b)("br",null),"在v8引擎内部，解析函数的时候会进行一次预检查，当识别到闭包的存在后，会将其引用的变量复制一份到堆内存。",Object(o.b)("br",null),"外层函数执行完出栈后，内部变量被释放。 但闭包变量此时引用已经指向堆内存，所以依旧可用。 堆内存空间也不是无限大的，如果积累到一定程度又得不到释放，就会造成内存泄漏。 闭包常见作用是变量私有化和缓存(如webpack同步加载)",Object(o.b)("br",null)),Object(o.b)("h3",null,"webpack同步加载"),Object(o.b)("pre",null,Object(o.b)("code",Object.assign({parentName:"pre"},{className:"language-js"}),"(function (modules) {\n    //模块缓存\n    var installedModules = {}\n    //自己实现的__webpack_require__ 取代原生的require\n    function __webpack_require__(moduleId) {\n        //命中缓存 直接返回\n        if (installedModules[moduleId]) {\n            return installedModules[moduleId].exports\n        }\n        //未命中缓存 添加\n        var module = installedModules[moduleId] = {\n            id: moduleId,//模块id\n            load: false,//默认模块没有被加载,\n            exports: {},//导出的内容\n        }\n        //加载对应模块\n        modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n        module.load = true//已经加载\n        return module.exports\n\n    }\n    //加载入口模块\n    return __webpack_require__('./src/index.js')\n\n})(\n\n    {\n        './src/index.js': (function (module, exports, __webpack_require__) {\n            const title = __webpack_require__('./src/title.js')\n            console.log(title)\n        }),\n        './src/title.js': (function (module, exports,) {\n            module.exports = 'hello'\n        })\n    })\n\n")))}c.isMDXComponent=!0}}]);
//# sourceMappingURL=component---src-pages-js-core-closure-index-mdx-cd41209ec56e67ae73c4.js.map