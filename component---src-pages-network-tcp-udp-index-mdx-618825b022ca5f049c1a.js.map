{"version":3,"sources":["webpack:///./src/pages/network/tcp-udp/index.mdx"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","style","background","isMDXComponent"],"mappings":"8RAOO,IAAMA,EAAe,GAOtBC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,E,oIACF,mBACD,OAAO,YAACJ,EAAD,iBAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAI5E,kCACA,8BACE,iBAAGC,WAAW,cAAd,8DAEF,YAAC,IAAD,CAAGC,MAAO,CACRC,WAAY,aACXH,QAAQ,KAFX,2DAGoD,uBAHpD,yDAIkD,uBAJlD,2DAKoD,uBALpD,sCAM+B,wBAE/B,0CACA,YAAC,IAAD,CAAGA,QAAQ,KAAX,+CAGA,yCACA,YAAC,IAAD,CAAGA,QAAQ,KAAX,4DAOJH,EAAWO,gBAAiB","file":"component---src-pages-network-tcp-udp-index-mdx-618825b022ca5f049c1a.js","sourcesContent":["import React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/Users/bytedance/Desktop/gatsby/src/components/BlogLayout/index.js\";\nimport P from '../../../components/Panel.js';\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n\n    <h3>{`TCP可靠的原因`}</h3>\n    <blockquote>\n      <p parentName=\"blockquote\">{`可靠不是百分百,TCP虽然采用诸多机制尽可能保证传输可靠,但在某些极端情况下,超过最大重传次数,还是会有数据丢失。`}</p>\n    </blockquote>\n    <P style={{\n      background: 'lightblue'\n    }} mdxType=\"P\">\n排序机制：TCP数据段以字节为单位对数据段的\"数据\"部分进行一一编号,确保每一个字节的数据都可以有序传送和接收。<br />\n数据段确认机制：接收端一但接收数据段,必须向发送端返回确认数据段,其中的确认号表示已经正确接收的数据段序号。<br />\n超时重传机制：发送数据段的同时开启重传定时器,如果定时器过期之时还没返回确认,视为数据包丢失,定时器停止,重传。<br />\n选择性确认机制：只重传缺少部分的数据,不会重传那些已经正确接收的数据。<br />\n    </P>\n    <h3>{`为什么TCP传输速度比UDP慢？`}</h3>\n    <P mdxType=\"P\">\nTCP传输前要进行三次握手建立连接,且具有数据包重传机制,都比较耗时,UDP没有这些。\n    </P>\n    <h3>{`不可靠的UDP应用场景是什么？`}</h3>\n    <P mdxType=\"P\">\n在追求速度但对可靠性不是很在意的场景,如在线视频,直播,游戏等场景,适合UDP,即便网络卡顿造成丢帧也能接受。\n    </P>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}